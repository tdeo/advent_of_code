# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `tzinfo` gem.
# Please instead update this file by running `bin/tapioca gem tzinfo`.

# Top level module for TZInfo.
#
# source://tzinfo//lib/tzinfo.rb#2
module TZInfo; end

# AmbiguousTime is raised to indicates that a specified time in a local
# timezone has more than one possible equivalent UTC time. This happens when
# transitioning from daylight savings time to standard time where the clocks
# are rolled back.
#
# AmbiguousTime is raised by period_for_local and local_to_utc when using an
# ambiguous time and not specifying any means to resolve the ambiguity.
#
# source://tzinfo//lib/tzinfo/timezone.rb#13
class TZInfo::AmbiguousTime < ::StandardError; end

# The Country class represents an ISO 3166-1 country. It can be used to
# obtain a list of Timezones for a country. For example:
#
#  us = Country.get('US')
#  us.zone_identifiers
#  us.zones
#  us.zone_info
#
# The Country class is thread-safe. It is safe to use class and instance
# methods of Country in concurrently executing threads. Instances of Country
# can be shared across thread boundaries.
#
# Country information available through TZInfo is intended as an aid for
# users, to help them select time zone data appropriate for their practical
# needs. It is not intended to take or endorse any position on legal or
# territorial claims.
#
# source://tzinfo//lib/tzinfo/country.rb#24
class TZInfo::Country
  include ::Comparable

  # Compare two Countries based on their code. Returns -1 if c is less
  # than self, 0 if c is equal to self and +1 if c is greater than self.
  #
  # Returns nil if c is not comparable with Country instances.
  #
  # source://tzinfo//lib/tzinfo/country.rb#152
  def <=>(c); end

  # Dumps this Country for marshalling.
  #
  # source://tzinfo//lib/tzinfo/country.rb#169
  def _dump(limit); end

  # The ISO 3166-1 alpha-2 country code.
  #
  # source://tzinfo//lib/tzinfo/country.rb#81
  def code; end

  # Returns true if and only if the code of c is equal to the code of this
  # Country.
  #
  # @return [Boolean]
  #
  # source://tzinfo//lib/tzinfo/country.rb#159
  def eql?(c); end

  # Returns a hash value for this Country.
  #
  # source://tzinfo//lib/tzinfo/country.rb#164
  def hash; end

  # Returns internal object state as a programmer-readable string.
  #
  # source://tzinfo//lib/tzinfo/country.rb#96
  def inspect; end

  # The name of the country.
  #
  # source://tzinfo//lib/tzinfo/country.rb#86
  def name; end

  # Alias for name.
  #
  # source://tzinfo//lib/tzinfo/country.rb#91
  def to_s; end

  # Returns a frozen array of all the zone identifiers for the country. These
  # are in an order that
  #
  # 1. makes some geographical sense, and
  # 2. puts the most populous zones first, where that does not contradict 1.
  #
  # Returned zone identifiers may refer to cities and regions outside of the
  # country. This will occur if the zone covers multiple countries. Any zones
  # referring to a city or region in a different country will be listed after
  # those relating to this country.
  #
  # source://tzinfo//lib/tzinfo/country.rb#110
  def zone_identifiers; end

  # Returns a frozen array of all the timezones for the for the country as
  # CountryTimezone instances (containing extra information about each zone).
  # These are in an order that
  #
  # 1. makes some geographical sense, and
  # 2. puts the most populous zones first, where that does not contradict 1.
  #
  # Identifiers and descriptions of the zones returned may refer to cities and
  # regions outside of the country. This will occur if the zone covers
  # multiple countries. Any zones referring to a city or region in a different
  # country will be listed after those relating to this country.
  #
  # source://tzinfo//lib/tzinfo/country.rb#144
  def zone_info; end

  # Returns a frozen array of all the zone identifiers for the country. These
  # are in an order that
  #
  # 1. makes some geographical sense, and
  # 2. puts the most populous zones first, where that does not contradict 1.
  #
  # Returned zone identifiers may refer to cities and regions outside of the
  # country. This will occur if the zone covers multiple countries. Any zones
  # referring to a city or region in a different country will be listed after
  # those relating to this country.
  #
  # source://tzinfo//lib/tzinfo/country.rb#110
  def zone_names; end

  # An array of all the Timezones for this country. Returns TimezoneProxy
  # objects to avoid the overhead of loading Timezone definitions until
  # a conversion is actually required. The Timezones are returned in an order
  # that
  #
  # 1. makes some geographical sense, and
  # 2. puts the most populous zones first, where that does not contradict 1.
  #
  # Identifiers of the zones returned may refer to cities and regions outside
  # of the country. This will occur if the zone covers multiple countries. Any
  # zones referring to a city or region in a different country will be listed
  # after those relating to this country.
  #
  # source://tzinfo//lib/tzinfo/country.rb#127
  def zones; end

  private

  # Called by Country.new to initialize a new Country instance. The info
  # parameter is a CountryInfo that defines the country.
  #
  # source://tzinfo//lib/tzinfo/country.rb#181
  def setup(info); end

  class << self
    # Loads a marshalled Country.
    #
    # source://tzinfo//lib/tzinfo/country.rb#174
    def _load(data); end

    # Returns an Array of all the defined Countries.
    #
    # source://tzinfo//lib/tzinfo/country.rb#76
    def all; end

    # Returns an Array of all the valid country codes.
    #
    # source://tzinfo//lib/tzinfo/country.rb#71
    def all_codes; end

    # Returns the current DataSource
    #
    # source://tzinfo//lib/tzinfo/country.rb#192
    def data_source; end

    # Gets a Country by its ISO 3166-1 alpha-2 code. Raises an
    # InvalidCountryCode exception if it couldn't be found.
    #
    # source://tzinfo//lib/tzinfo/country.rb#39
    def get(identifier); end

    # Initializes @@countries.
    #
    # source://tzinfo//lib/tzinfo/country.rb#186
    def init_countries; end

    # If identifier is a CountryInfo object, initializes the Country instance,
    # otherwise calls get(identifier).
    #
    # source://tzinfo//lib/tzinfo/country.rb#60
    def new(identifier); end
  end
end

# The country index file includes CountryIndexDefinition which provides
# a country method used to define each country in the index.
#
# @private
#
# source://tzinfo//lib/tzinfo/country_index_definition.rb#6
module TZInfo::CountryIndexDefinition
  mixes_in_class_methods ::TZInfo::CountryIndexDefinition::ClassMethods

  class << self
    # source://tzinfo//lib/tzinfo/country_index_definition.rb#7
    def append_features(base); end
  end
end

# Class methods for inclusion.
#
# @private
#
# source://tzinfo//lib/tzinfo/country_index_definition.rb#16
module TZInfo::CountryIndexDefinition::ClassMethods
  # Returns a frozen hash of all the countries that have been defined in
  # the index.
  #
  # source://tzinfo//lib/tzinfo/country_index_definition.rb#26
  def countries; end

  # Defines a country with an ISO 3166 country code, name and block. The
  # block will be evaluated to obtain all the timezones for the country.
  # Calls Country.country_defined with the definition of each country.
  #
  # source://tzinfo//lib/tzinfo/country_index_definition.rb#20
  def country(code, name, &block); end
end

# Represents a country and references to its timezones as returned by a
# DataSource.
#
# source://tzinfo//lib/tzinfo/country_info.rb#4
class TZInfo::CountryInfo
  # Constructs a new CountryInfo with an ISO 3166 country code and name
  #
  # @return [CountryInfo] a new instance of CountryInfo
  #
  # source://tzinfo//lib/tzinfo/country_info.rb#12
  def initialize(code, name); end

  # The ISO 3166 country code.
  #
  # source://tzinfo//lib/tzinfo/country_info.rb#6
  def code; end

  # Returns internal object state as a programmer-readable string.
  #
  # source://tzinfo//lib/tzinfo/country_info.rb#18
  def inspect; end

  # The name of the country.
  #
  # source://tzinfo//lib/tzinfo/country_info.rb#9
  def name; end

  # Returns a frozen array of all the zone identifiers for the country.
  # The identifiers are ordered by importance according to the DataSource.
  #
  # source://tzinfo//lib/tzinfo/country_info.rb#24
  def zone_identifiers; end

  # Returns a frozen array of all the timezones for the for the country as
  # CountryTimezone instances.
  #
  # The timezones are ordered by importance according to the DataSource.
  #
  # source://tzinfo//lib/tzinfo/country_info.rb#32
  def zones; end

  private

  # @raise [NotImplementedError]
  #
  # source://tzinfo//lib/tzinfo/country_info.rb#38
  def raise_not_implemented(method_name); end
end

# A Timezone within a Country. This contains extra information about the
# Timezone that is specific to the Country (a Timezone could be used by
# multiple countries).
#
# source://tzinfo//lib/tzinfo/country_timezone.rb#5
class TZInfo::CountryTimezone
  # Creates a new CountryTimezone with a timezone identifier, latitude,
  # longitude and description. The latitude and longitude are specified as
  # rationals - a numerator and denominator. For performance reasons, the
  # numerators and denominators must be specified in their lowest form.
  #
  # @return [CountryTimezone] a new instance of CountryTimezone
  #
  # source://tzinfo//lib/tzinfo/country_timezone.rb#42
  def initialize(identifier, latitude_numerator, latitude_denominator, longitude_numerator, longitude_denominator, description = T.unsafe(nil)); end

  # Returns true if and only if the given CountryTimezone is equal to the
  # current CountryTimezone (has the same identifer, latitude, longitude
  # and description).
  #
  # source://tzinfo//lib/tzinfo/country_timezone.rb#109
  def ==(ct); end

  # A description of this timezone in relation to the country, e.g.
  # "Eastern Time". This is usually nil for countries having only a single
  # Timezone.
  #
  # source://tzinfo//lib/tzinfo/country_timezone.rb#12
  def description; end

  # if description is not nil, this method returns description; otherwise it
  # returns timezone.friendly_identifier(true).
  #
  # source://tzinfo//lib/tzinfo/country_timezone.rb#72
  def description_or_friendly_identifier; end

  # Returns true if and only if the given CountryTimezone is equal to the
  # current CountryTimezone (has the same identifer, latitude, longitude
  # and description).
  #
  # @return [Boolean]
  #
  # source://tzinfo//lib/tzinfo/country_timezone.rb#118
  def eql?(ct); end

  # Returns a hash of this CountryTimezone.
  #
  # source://tzinfo//lib/tzinfo/country_timezone.rb#123
  def hash; end

  # The zone identifier.
  #
  # source://tzinfo//lib/tzinfo/country_timezone.rb#7
  def identifier; end

  # Returns internal object state as a programmer-readable string.
  #
  # source://tzinfo//lib/tzinfo/country_timezone.rb#131
  def inspect; end

  # The latitude of this timezone in degrees as a Rational.
  #
  # source://tzinfo//lib/tzinfo/country_timezone.rb#77
  def latitude; end

  # The longitude of this timezone in degrees as a Rational.
  #
  # source://tzinfo//lib/tzinfo/country_timezone.rb#92
  def longitude; end

  # The Timezone (actually a TimezoneProxy for performance reasons).
  #
  # source://tzinfo//lib/tzinfo/country_timezone.rb#66
  def timezone; end

  class << self
    # Creates a new CountryTimezone with a timezone identifier, latitude,
    # longitude and description. The latitude and longitude must be specified
    # as instances of Rational.
    #
    # CountryTimezone instances should normally only be constructed when
    # creating new DataSource implementations.
    #
    # source://tzinfo//lib/tzinfo/country_timezone.rb#31
    def new(identifier, latitude, longitude, description = T.unsafe(nil)); end

    # Creates a new CountryTimezone with a timezone identifier, latitude,
    # longitude and description. The latitude and longitude are specified as
    # rationals - a numerator and denominator. For performance reasons, the
    # numerators and denominators must be specified in their lowest form.
    #
    # For use internally within TZInfo.
    def new!(*_arg0); end
  end
end

# The base class for data sources of timezone and country data.
#
# Use DataSource.set to change the data source being used.
#
# source://tzinfo//lib/tzinfo/data_source.rb#18
class TZInfo::DataSource
  # Returns an array of all the available ISO 3166-1 alpha-2
  # country codes.
  #
  # source://tzinfo//lib/tzinfo/data_source.rb#150
  def country_codes; end

  # Returns an array of all the available timezone identifiers for
  # data timezones (i.e. those that actually contain definitions).
  #
  # source://tzinfo//lib/tzinfo/data_source.rb#131
  def data_timezone_identifiers; end

  # Returns internal object state as a programmer-readable string.
  #
  # source://tzinfo//lib/tzinfo/data_source.rb#160
  def inspect; end

  # Returns an array of all the available timezone identifiers that
  # are links to other timezones.
  #
  # source://tzinfo//lib/tzinfo/data_source.rb#137
  def linked_timezone_identifiers; end

  # Returns a CountryInfo instance for the given ISO 3166-1 alpha-2
  # country code. Raises InvalidCountryCode if the country could not be found
  # or the code is invalid.
  #
  # source://tzinfo//lib/tzinfo/data_source.rb#144
  def load_country_info(code); end

  # Returns a TimezoneInfo instance for a given identifier. The TimezoneInfo
  # instance should derive from either DataTimzoneInfo for timezones that
  # define their own data or LinkedTimezoneInfo for links or aliases to
  # other timezones.
  #
  # Raises InvalidTimezoneIdentifier if the timezone is not found or the
  # identifier is invalid.
  #
  # source://tzinfo//lib/tzinfo/data_source.rb#120
  def load_timezone_info(identifier); end

  # Returns an array of all the available timezone identifiers.
  #
  # source://tzinfo//lib/tzinfo/data_source.rb#125
  def timezone_identifiers; end

  # Returns the name of this DataSource.
  #
  # source://tzinfo//lib/tzinfo/data_source.rb#155
  def to_s; end

  private

  # @raise [InvalidDataSource]
  #
  # source://tzinfo//lib/tzinfo/data_source.rb#186
  def raise_invalid_data_source(method_name); end

  class << self
    # Creates a DataSource instance for use as the default. Used if
    # no preference has been specified manually.
    #
    # source://tzinfo//lib/tzinfo/data_source.rb#168
    def create_default_data_source; end

    # Returns the currently selected DataSource instance.
    #
    # source://tzinfo//lib/tzinfo/data_source.rb#26
    def get; end

    # Sets the currently selected data source for Timezone and Country data.
    #
    # This should usually be set to one of the two standard data source types:
    #
    # * +:ruby+ - read data from the Ruby modules included in the TZInfo::Data
    #   library (tzinfo-data gem).
    # * +:zoneinfo+ - read data from the zoneinfo files included with most
    #   Unix-like operating sytems (e.g. in /usr/share/zoneinfo).
    #
    # To set TZInfo to use one of the standard data source types, call
    # \TZInfo::DataSource.set in one of the following ways:
    #
    #   TZInfo::DataSource.set(:ruby)
    #   TZInfo::DataSource.set(:zoneinfo)
    #   TZInfo::DataSource.set(:zoneinfo, zoneinfo_dir)
    #   TZInfo::DataSource.set(:zoneinfo, zoneinfo_dir, iso3166_tab_file)
    #
    # \DataSource.set(:zoneinfo) will automatically search for the zoneinfo
    # directory by checking the paths specified in
    # ZoneinfoDataSource.search_paths. ZoneinfoDirectoryNotFound will be raised
    # if no valid zoneinfo directory could be found.
    #
    # \DataSource.set(:zoneinfo, zoneinfo_dir) uses the specified zoneinfo
    # directory as the data source. If the directory is not a valid zoneinfo
    # directory, an InvalidZoneinfoDirectory exception will be raised.
    #
    # \DataSource.set(:zoneinfo, zoneinfo_dir, iso3166_tab_file) uses the
    # specified zoneinfo directory as the data source, but loads the iso3166.tab
    # file from an alternate path. If the directory is not a valid zoneinfo
    # directory, an InvalidZoneinfoDirectory exception will be raised.
    #
    # Custom data sources can be created by subclassing TZInfo::DataSource and
    # implementing the following methods:
    #
    # * \load_timezone_info
    # * \timezone_identifiers
    # * \data_timezone_identifiers
    # * \linked_timezone_identifiers
    # * \load_country_info
    # * \country_codes
    #
    # To have TZInfo use the custom data source, call \DataSource.set
    # as follows:
    #
    #   TZInfo::DataSource.set(CustomDataSource.new)
    #
    # To avoid inconsistent data, \DataSource.set should be called before
    # accessing any Timezone or Country data.
    #
    # If \DataSource.set is not called, TZInfo will by default use TZInfo::Data
    # as the data source. If TZInfo::Data is not available (i.e. if require
    # 'tzinfo/data' fails), then TZInfo will search for a zoneinfo directory
    # instead (using the search path specified by
    # TZInfo::ZoneinfoDataSource::DEFAULT_SEARCH_PATH).
    #
    # source://tzinfo//lib/tzinfo/data_source.rb#101
    def set(data_source_or_type, *args); end
  end
end

# DataSourceNotFound is raised if no data source could be found (i.e.
# if 'tzinfo/data' cannot be found on the load path and no valid zoneinfo
# directory can be found on the system).
#
# source://tzinfo//lib/tzinfo/data_source.rb#12
class TZInfo::DataSourceNotFound < ::StandardError; end

# A Timezone based on a DataTimezoneInfo.
#
# @private
#
# source://tzinfo//lib/tzinfo/data_timezone.rb#6
class TZInfo::DataTimezone < ::TZInfo::InfoTimezone
  # Returns the canonical zone for this Timezone.
  #
  # For a DataTimezone, this is always self.
  #
  # source://tzinfo//lib/tzinfo/data_timezone.rb#54
  def canonical_zone; end

  # Returns the TimezonePeriod for the given UTC time. utc can either be
  # a DateTime, Time or integer timestamp (Time.to_i). Any timezone
  # information in utc is ignored (it is treated as a UTC time).
  #
  # If no TimezonePeriod could be found, PeriodNotFound is raised.
  #
  # source://tzinfo//lib/tzinfo/data_timezone.rb#13
  def period_for_utc(utc); end

  # Returns the set of TimezonePeriod instances that are valid for the given
  # local time as an array. If you just want a single period, use
  # period_for_local instead and specify how abiguities should be resolved.
  # Raises PeriodNotFound if no periods are found for the given time.
  #
  # source://tzinfo//lib/tzinfo/data_timezone.rb#21
  def periods_for_local(local); end

  # Returns an Array of TimezoneTransition instances representing the times
  # where the UTC offset of the timezone changes.
  #
  # Transitions are returned up to a given date and time up to a given date
  # and time, specified in UTC (utc_to).
  #
  # A from date and time may also be supplied using the utc_from parameter
  # (also specified in UTC). If utc_from is not nil, only transitions from
  # that date and time onwards will be returned.
  #
  # Comparisons with utc_to are exclusive. Comparisons with utc_from are
  # inclusive. If a transition falls precisely on utc_to, it will be excluded.
  # If a transition falls on utc_from, it will be included.
  #
  # Transitions returned are ordered by when they occur, from earliest to
  # latest.
  #
  # utc_to and utc_from can be specified using either DateTime, Time or
  # integer timestamps (Time.to_i).
  #
  # If utc_from is specified and utc_to is not greater than utc_from, then
  # transitions_up_to raises an ArgumentError exception.
  #
  # source://tzinfo//lib/tzinfo/data_timezone.rb#47
  def transitions_up_to(utc_to, utc_from = T.unsafe(nil)); end
end

# Represents a defined timezone containing transition data.
#
# source://tzinfo//lib/tzinfo/data_timezone_info.rb#3
class TZInfo::DataTimezoneInfo < ::TZInfo::TimezoneInfo
  # Constructs a Timezone instance for the timezone represented by this
  # DataTimezoneInfo.
  #
  # source://tzinfo//lib/tzinfo/data_timezone_info.rb#45
  def create_timezone; end

  # Returns the TimezonePeriod for the given UTC time.
  #
  # source://tzinfo//lib/tzinfo/data_timezone_info.rb#6
  def period_for_utc(utc); end

  # Returns the set of TimezonePeriods for the given local time as an array.
  # Results returned are ordered by increasing UTC start date.
  # Returns an empty array if no periods are found for the given time.
  #
  # source://tzinfo//lib/tzinfo/data_timezone_info.rb#13
  def periods_for_local(local); end

  # Returns an Array of TimezoneTransition instances representing the times
  # where the UTC offset of the timezone changes.
  #
  # Transitions are returned up to a given date and time up to a given date
  # and time, specified in UTC (utc_to).
  #
  # A from date and time may also be supplied using the utc_from parameter
  # (also specified in UTC). If utc_from is not nil, only transitions from
  # that date and time onwards will be returned.
  #
  # Comparisons with utc_to are exclusive. Comparisons with utc_from are
  # inclusive. If a transition falls precisely on utc_to, it will be excluded.
  # If a transition falls on utc_from, it will be included.
  #
  # Transitions returned are ordered by when they occur, from earliest to
  # latest.
  #
  # utc_to and utc_from can be specified using either DateTime, Time or
  # integer timestamps (Time.to_i).
  #
  # If utc_from is specified and utc_to is not greater than utc_from, then
  # transitions_up_to raises an ArgumentError exception.
  #
  # source://tzinfo//lib/tzinfo/data_timezone_info.rb#39
  def transitions_up_to(utc_to, utc_from = T.unsafe(nil)); end

  private

  # @raise [NotImplementedError]
  #
  # source://tzinfo//lib/tzinfo/data_timezone_info.rb#51
  def raise_not_implemented(method_name); end
end

# A Timezone based on a TimezoneInfo.
#
# @private
#
# source://tzinfo//lib/tzinfo/info_timezone.rb#6
class TZInfo::InfoTimezone < ::TZInfo::Timezone
  # The identifier of the timezone, e.g. "Europe/Paris".
  #
  # source://tzinfo//lib/tzinfo/info_timezone.rb#16
  def identifier; end

  protected

  # The TimezoneInfo for this Timezone.
  #
  # source://tzinfo//lib/tzinfo/info_timezone.rb#22
  def info; end

  # source://tzinfo//lib/tzinfo/info_timezone.rb#26
  def setup(info); end

  class << self
    # Constructs a new InfoTimezone with a TimezoneInfo instance.
    #
    # source://tzinfo//lib/tzinfo/info_timezone.rb#9
    def new(info); end
  end
end

# Raised by Country#get if the code given is not valid.
#
# source://tzinfo//lib/tzinfo/country.rb#5
class TZInfo::InvalidCountryCode < ::StandardError; end

# InvalidDataSource is raised if the DataSource is used doesn't implement one
# of the required methods.
#
# source://tzinfo//lib/tzinfo/data_source.rb#6
class TZInfo::InvalidDataSource < ::StandardError; end

# Raised by Timezone#get if the identifier given is not valid.
#
# source://tzinfo//lib/tzinfo/timezone.rb#22
class TZInfo::InvalidTimezoneIdentifier < ::StandardError; end

# An InvalidZoneinfoDirectory exception is raised if the DataSource is
# set to a specific zoneinfo path, which is not a valid zoneinfo directory
# (i.e. a directory containing index files named iso3166.tab and zone.tab
# as well as other timezone files).
#
# source://tzinfo//lib/tzinfo/zoneinfo_data_source.rb#6
class TZInfo::InvalidZoneinfoDirectory < ::StandardError; end

# An InvalidZoneinfoFile exception is raised if an attempt is made to load an
# invalid zoneinfo file.
#
# source://tzinfo//lib/tzinfo/zoneinfo_timezone_info.rb#4
class TZInfo::InvalidZoneinfoFile < ::StandardError; end

# A Timezone based on a LinkedTimezoneInfo.
#
# @private
#
# source://tzinfo//lib/tzinfo/linked_timezone.rb#11
class TZInfo::LinkedTimezone < ::TZInfo::InfoTimezone
  # Returns the canonical zone for this Timezone.
  #
  # For a LinkedTimezone, this is the canonical zone of the link target.
  #
  # source://tzinfo//lib/tzinfo/linked_timezone.rb#53
  def canonical_zone; end

  # Returns the TimezonePeriod for the given UTC time. utc can either be
  # a DateTime, Time or integer timestamp (Time.to_i). Any timezone
  # information in utc is ignored (it is treated as a UTC time).
  #
  # If no TimezonePeriod could be found, PeriodNotFound is raised.
  #
  # source://tzinfo//lib/tzinfo/linked_timezone.rb#12
  def period_for_utc(utc); end

  # Returns the set of TimezonePeriod instances that are valid for the given
  # local time as an array. If you just want a single period, use
  # period_for_local instead and specify how abiguities should be resolved.
  # Raises PeriodNotFound if no periods are found for the given time.
  #
  # source://tzinfo//lib/tzinfo/linked_timezone.rb#20
  def periods_for_local(local); end

  # Returns an Array of TimezoneTransition instances representing the times
  # where the UTC offset of the timezone changes.
  #
  # Transitions are returned up to a given date and time up to a given date
  # and time, specified in UTC (utc_to).
  #
  # A from date and time may also be supplied using the utc_from parameter
  # (also specified in UTC). If utc_from is not nil, only transitions from
  # that date and time onwards will be returned.
  #
  # Comparisons with utc_to are exclusive. Comparisons with utc_from are
  # inclusive. If a transition falls precisely on utc_to, it will be excluded.
  # If a transition falls on utc_from, it will be included.
  #
  # Transitions returned are ordered by when they occur, from earliest to
  # latest.
  #
  # utc_to and utc_from can be specified using either DateTime, Time or
  # integer timestamps (Time.to_i).
  #
  # If utc_from is specified and utc_to is not greater than utc_from, then
  # transitions_up_to raises an ArgumentError exception.
  #
  # source://tzinfo//lib/tzinfo/linked_timezone.rb#46
  def transitions_up_to(utc_to, utc_from = T.unsafe(nil)); end

  protected

  # source://tzinfo//lib/tzinfo/linked_timezone.rb#58
  def setup(info); end
end

# Represents a timezone that is defined as a link or alias to another zone.
#
# source://tzinfo//lib/tzinfo/linked_timezone_info.rb#3
class TZInfo::LinkedTimezoneInfo < ::TZInfo::TimezoneInfo
  # Constructs a new LinkedTimezoneInfo with an identifier and the identifier
  # of the zone linked to.
  #
  # @return [LinkedTimezoneInfo] a new instance of LinkedTimezoneInfo
  #
  # source://tzinfo//lib/tzinfo/linked_timezone_info.rb#10
  def initialize(identifier, link_to_identifier); end

  # Constructs a Timezone instance for the timezone represented by this
  # DataTimezoneInfo.
  #
  # source://tzinfo//lib/tzinfo/linked_timezone_info.rb#22
  def create_timezone; end

  # Returns internal object state as a programmer-readable string.
  #
  # source://tzinfo//lib/tzinfo/linked_timezone_info.rb#16
  def inspect; end

  # The zone that provides the data (that this zone is an alias for).
  #
  # source://tzinfo//lib/tzinfo/linked_timezone_info.rb#6
  def link_to_identifier; end
end

# Raised if no offsets have been defined when calling period_for_utc or
# periods_for_local. Indicates an error in the timezone data.
#
# source://tzinfo//lib/tzinfo/transition_data_timezone_info.rb#4
class TZInfo::NoOffsetsDefined < ::StandardError; end

# Provides a method for getting Rationals for a timezone offset in seconds.
# Pre-reduced rationals are returned for all the half-hour intervals between
# -14 and +14 hours to avoid having to call gcd at runtime.
#
# @private
#
# source://tzinfo//lib/tzinfo/offset_rationals.rb#10
module TZInfo::OffsetRationals
  private

  # Returns a Rational expressing the fraction of a day that offset in
  # seconds represents (i.e. equivalent to Rational(offset, 86400)).
  #
  # source://tzinfo//lib/tzinfo/offset_rationals.rb#72
  def rational_for_offset(offset); end

  class << self
    # Returns a Rational expressing the fraction of a day that offset in
    # seconds represents (i.e. equivalent to Rational(offset, 86400)).
    #
    # source://tzinfo//lib/tzinfo/offset_rationals.rb#72
    def rational_for_offset(offset); end
  end
end

# PeriodNotFound is raised to indicate that no TimezonePeriod matching a given
# time could be found.
#
# source://tzinfo//lib/tzinfo/timezone.rb#18
class TZInfo::PeriodNotFound < ::StandardError; end

# Methods to support different versions of Ruby.
#
# @private
#
# source://tzinfo//lib/tzinfo/ruby_core_support.rb#9
module TZInfo::RubyCoreSupport
  class << self
    # source://tzinfo//lib/tzinfo/ruby_core_support.rb#73
    def datetime_new(y = T.unsafe(nil), m = T.unsafe(nil), d = T.unsafe(nil), h = T.unsafe(nil), min = T.unsafe(nil), s = T.unsafe(nil), of = T.unsafe(nil), sg = T.unsafe(nil)); end

    # source://tzinfo//lib/tzinfo/ruby_core_support.rb#40
    def datetime_new!(ajd = T.unsafe(nil), of = T.unsafe(nil), sg = T.unsafe(nil)); end

    # source://tzinfo//lib/tzinfo/ruby_core_support.rb#123
    def force_encoding(str, encoding); end

    # source://tzinfo//lib/tzinfo/ruby_core_support.rb#141
    def open_file(file_name, mode, opts, &block); end

    # source://tzinfo//lib/tzinfo/ruby_core_support.rb#18
    def rational_new!(numerator, denominator = T.unsafe(nil)); end

    # source://tzinfo//lib/tzinfo/ruby_core_support.rb#111
    def time_nsec(time); end

    # source://tzinfo//lib/tzinfo/ruby_core_support.rb#99
    def time_supports_64bit; end

    # source://tzinfo//lib/tzinfo/ruby_core_support.rb#84
    def time_supports_negative; end
  end
end

# source://tzinfo//lib/tzinfo/ruby_core_support.rb#38
TZInfo::RubyCoreSupport::HALF_DAYS_IN_DAY = T.let(T.unsafe(nil), Rational)

# Represents information about a country returned by RubyDataSource.
#
# @private
#
# source://tzinfo//lib/tzinfo/ruby_country_info.rb#8
class TZInfo::RubyCountryInfo < ::TZInfo::CountryInfo
  # Constructs a new CountryInfo with an ISO 3166 country code, name and
  # block. The block will be evaluated to obtain the timezones for the
  # country when the zones are first needed.
  #
  # @return [RubyCountryInfo] a new instance of RubyCountryInfo
  #
  # source://tzinfo//lib/tzinfo/ruby_country_info.rb#9
  def initialize(code, name, &block); end

  # Returns a frozen array of all the zone identifiers for the country. These
  # are in the order they were added using the timezone method.
  #
  # source://tzinfo//lib/tzinfo/ruby_country_info.rb#18
  def zone_identifiers; end

  # Returns a frozen array of all the timezones for the for the country as
  # CountryTimezone instances. These are in the order they were added using
  # the timezone method.
  #
  # source://tzinfo//lib/tzinfo/ruby_country_info.rb#36
  def zones; end
end

# An instance of the Zones class is passed to the block used to define
# timezones.
#
# @private
#
# source://tzinfo//lib/tzinfo/ruby_country_info.rb#58
class TZInfo::RubyCountryInfo::Zones
  # @return [Zones] a new instance of Zones
  #
  # source://tzinfo//lib/tzinfo/ruby_country_info.rb#61
  def initialize; end

  # source://tzinfo//lib/tzinfo/ruby_country_info.rb#59
  def list; end

  # Called by the index data to define a timezone for the country.
  #
  # source://tzinfo//lib/tzinfo/ruby_country_info.rb#66
  def timezone(identifier, latitude_numerator, latitude_denominator, longitude_numerator, longitude_denominator, description = T.unsafe(nil)); end
end

# A DataSource that loads data from the set of Ruby modules included in the
# TZInfo::Data library (tzinfo-data gem).
#
# To have TZInfo use this DataSource, call TZInfo::DataSource.set as follows:
#
#   TZInfo::DataSource.set(:ruby)
#
# source://tzinfo//lib/tzinfo/ruby_data_source.rb#9
class TZInfo::RubyDataSource < ::TZInfo::DataSource
  # Returns an array of all the available ISO 3166-1 alpha-2
  # country codes.
  #
  # source://tzinfo//lib/tzinfo/ruby_data_source.rb#78
  def country_codes; end

  # Returns an array of all the available timezone identifiers for
  # data timezones (i.e. those that actually contain definitions).
  #
  # source://tzinfo//lib/tzinfo/ruby_data_source.rb#54
  def data_timezone_identifiers; end

  # Returns an array of all the available timezone identifiers that
  # are links to other timezones.
  #
  # source://tzinfo//lib/tzinfo/ruby_data_source.rb#61
  def linked_timezone_identifiers; end

  # Returns a CountryInfo instance for the given ISO 3166-1 alpha-2
  # country code. Raises InvalidCountryCode if the country could not be found
  # or the code is invalid.
  #
  # @raise [InvalidCountryCode]
  #
  # source://tzinfo//lib/tzinfo/ruby_data_source.rb#69
  def load_country_info(code); end

  # Returns a TimezoneInfo instance for a given identifier.
  # Raises InvalidTimezoneIdentifier if the timezone is not found or the
  # identifier is invalid.
  #
  # @raise [InvalidTimezoneIdentifier]
  #
  # source://tzinfo//lib/tzinfo/ruby_data_source.rb#21
  def load_timezone_info(identifier); end

  # Returns an array of all the available timezone identifiers.
  #
  # source://tzinfo//lib/tzinfo/ruby_data_source.rb#47
  def timezone_identifiers; end

  # Returns the name of this DataSource.
  #
  # source://tzinfo//lib/tzinfo/ruby_data_source.rb#84
  def to_s; end

  private

  # Loads in the index of countries if it hasn't already been loaded.
  #
  # source://tzinfo//lib/tzinfo/ruby_data_source.rb#124
  def load_country_index; end

  # Loads in the index of timezones if it hasn't already been loaded.
  #
  # source://tzinfo//lib/tzinfo/ruby_data_source.rb#111
  def load_timezone_index; end

  # Requires a file from tzinfo/data.
  #
  # source://tzinfo//lib/tzinfo/ruby_data_source.rb#101
  def require_data(*file); end

  # Requires a zone definition by its identifier (split on /).
  #
  # source://tzinfo//lib/tzinfo/ruby_data_source.rb#91
  def require_definition(identifier); end

  class << self
    # Loads in the index of countries if it hasn't already been loaded.
    #
    # source://tzinfo//lib/tzinfo/ruby_data_source.rb#129
    def load_country_index; end

    # Loads in the index of timezones if it hasn't already been loaded.
    #
    # source://tzinfo//lib/tzinfo/ruby_data_source.rb#116
    def load_timezone_index; end

    # Requires a file from tzinfo/data.
    #
    # source://tzinfo//lib/tzinfo/ruby_data_source.rb#106
    def require_data(*file); end

    # Requires an index by its name.
    #
    # source://tzinfo//lib/tzinfo/ruby_data_source.rb#96
    def require_index(name); end
  end
end

# Base path for require.
#
# source://tzinfo//lib/tzinfo/ruby_data_source.rb#10
TZInfo::RubyDataSource::REQUIRE_PATH = T.let(T.unsafe(nil), String)

# Used by TZInfo internally to represent either a Time, DateTime or
# an Integer timestamp (seconds since 1970-01-01 00:00:00).
#
# source://tzinfo//lib/tzinfo/time_or_datetime.rb#8
class TZInfo::TimeOrDateTime
  include ::Comparable

  # Constructs a new TimeOrDateTime. timeOrDateTime can be a Time, DateTime
  # or Integer. If using a Time or DateTime, any time zone information
  # is ignored.
  #
  # Integer timestamps must be within the range supported by Time on the
  # platform being used.
  #
  # @return [TimeOrDateTime] a new instance of TimeOrDateTime
  #
  # source://tzinfo//lib/tzinfo/time_or_datetime.rb#17
  def initialize(timeOrDateTime); end

  # Adds a number of seconds to the TimeOrDateTime. Returns a new
  # TimeOrDateTime, preserving what the original constructed type was.
  # If the original type is a Time and the resulting calculation goes out of
  # range for Times, then an exception will be raised by the Time class.
  #
  # source://tzinfo//lib/tzinfo/time_or_datetime.rb#252
  def +(seconds); end

  # Subtracts a number of seconds from the TimeOrDateTime. Returns a new
  # TimeOrDateTime, preserving what the original constructed type was.
  # If the original type is a Time and the resulting calculation goes out of
  # range for Times, then an exception will be raised by the Time class.
  #
  # source://tzinfo//lib/tzinfo/time_or_datetime.rb#269
  def -(seconds); end

  # Compares this TimeOrDateTime with another Time, DateTime, timestamp
  # (Integer) or TimeOrDateTime. Returns -1, 0 or +1 depending
  # whether the receiver is less than, equal to, or greater than
  # timeOrDateTime.
  #
  # Returns nil if the passed in timeOrDateTime is not comparable with
  # TimeOrDateTime instances.
  #
  # Comparisons involving a DateTime will be performed using DateTime#<=>.
  # Comparisons that don't involve a DateTime, but include a Time will be
  # performed with Time#<=>. Otherwise comparisons will be performed with
  # Integer#<=>.
  #
  # source://tzinfo//lib/tzinfo/time_or_datetime.rb#225
  def <=>(timeOrDateTime); end

  # Similar to the + operator, but converts to a DateTime based TimeOrDateTime
  # where the  Time or Integer timestamp to go out of the allowed range for a
  # Time, converts to a DateTime based TimeOrDateTime.
  #
  # Note that the range of Time varies based on the platform.
  #
  # source://tzinfo//lib/tzinfo/time_or_datetime.rb#278
  def add_with_convert(seconds); end

  # Returns the day of the month (1..n).
  #
  # source://tzinfo//lib/tzinfo/time_or_datetime.rb#153
  def day; end

  # Returns true if todt represents the same time and was originally
  # constructed with the same type (DateTime, Time or timestamp) as this
  # TimeOrDateTime.
  #
  # @return [Boolean]
  #
  # source://tzinfo//lib/tzinfo/time_or_datetime.rb#300
  def eql?(todt); end

  # Returns a hash of this TimeOrDateTime.
  #
  # source://tzinfo//lib/tzinfo/time_or_datetime.rb#305
  def hash; end

  # Returns the hour of the day (0..23).
  #
  # source://tzinfo//lib/tzinfo/time_or_datetime.rb#165
  def hour; end

  # Returns internal object state as a programmer-readable string.
  #
  # source://tzinfo//lib/tzinfo/time_or_datetime.rb#125
  def inspect; end

  # Returns the day of the month (1..n).
  #
  # source://tzinfo//lib/tzinfo/time_or_datetime.rb#153
  def mday; end

  # Returns the minute of the hour (0..59).
  #
  # source://tzinfo//lib/tzinfo/time_or_datetime.rb#176
  def min; end

  # Returns the month of the year (1..12).
  #
  # source://tzinfo//lib/tzinfo/time_or_datetime.rb#141
  def mon; end

  # Returns the month of the year (1..12).
  #
  # source://tzinfo//lib/tzinfo/time_or_datetime.rb#141
  def month; end

  # Returns the second of the minute (0..60). (60 for a leap second).
  #
  # source://tzinfo//lib/tzinfo/time_or_datetime.rb#187
  def sec; end

  # Returns the time as a DateTime.
  #
  # When converting from a Time, the result is truncated to microsecond
  # precision.
  #
  # source://tzinfo//lib/tzinfo/time_or_datetime.rb#74
  def to_datetime; end

  # Returns the time as an integer timestamp.
  #
  # source://tzinfo//lib/tzinfo/time_or_datetime.rb#93
  def to_i; end

  # Returns the time as the original time passed to new.
  #
  # source://tzinfo//lib/tzinfo/time_or_datetime.rb#109
  def to_orig; end

  # Returns a string representation of the TimeOrDateTime.
  #
  # source://tzinfo//lib/tzinfo/time_or_datetime.rb#114
  def to_s; end

  # Returns the time as a Time.
  #
  # When converting from a DateTime, the result is truncated to microsecond
  # precision.
  #
  # source://tzinfo//lib/tzinfo/time_or_datetime.rb#50
  def to_time; end

  # Returns the number of microseconds for the time.
  #
  # source://tzinfo//lib/tzinfo/time_or_datetime.rb#198
  def usec; end

  # Returns the year.
  #
  # source://tzinfo//lib/tzinfo/time_or_datetime.rb#130
  def year; end

  class << self
    # If no block is given, returns a TimeOrDateTime wrapping the given
    # timeOrDateTime. If a block is specified, a TimeOrDateTime is constructed
    # and passed to the block. The result of the block must be a TimeOrDateTime.
    #
    # The result of the block will be converted to the type of the originally
    # passed in timeOrDateTime and then returned as the result of wrap.
    #
    # timeOrDateTime can be a Time, DateTime, timestamp (Integer) or
    # TimeOrDateTime. If a TimeOrDateTime is passed in, no new TimeOrDateTime
    # will be constructed and the value passed to wrap will be used when
    # calling the block.
    #
    # source://tzinfo//lib/tzinfo/time_or_datetime.rb#320
    def wrap(timeOrDateTime); end
  end
end

# Timezone is the base class of all timezones. It provides a factory method,
# 'get', to access timezones by identifier. Once a specific Timezone has been
# retrieved, DateTimes, Times and timestamps can be converted between the UTC
# and the local time for the zone. For example:
#
#   tz = TZInfo::Timezone.get('America/New_York')
#   puts tz.utc_to_local(DateTime.new(2005,8,29,15,35,0)).to_s
#   puts tz.local_to_utc(Time.utc(2005,8,29,11,35,0)).to_s
#   puts tz.utc_to_local(1125315300).to_s
#
# Each time conversion method returns an object of the same type it was
# passed.
#
# The Timezone class is thread-safe. It is safe to use class and instance
# methods of Timezone in concurrently executing threads. Instances of Timezone
# can be shared across thread boundaries.
#
# source://tzinfo//lib/tzinfo/timezone.rb#46
class TZInfo::Timezone
  include ::Comparable

  # Compares two Timezones based on their identifier. Returns -1 if tz is less
  # than self, 0 if tz is equal to self and +1 if tz is greater than self.
  #
  # Returns nil if tz is not comparable with Timezone instances.
  #
  # source://tzinfo//lib/tzinfo/timezone.rb#620
  def <=>(tz); end

  # Dumps this Timezone for marshalling.
  #
  # source://tzinfo//lib/tzinfo/timezone.rb#637
  def _dump(limit); end

  # Returns the canonical identifier for this Timezone.
  #
  # This is a shortcut for calling canonical_zone.identifier. Please refer
  # to the canonical_zone documentation for further information.
  #
  # source://tzinfo//lib/tzinfo/timezone.rb#532
  def canonical_identifier; end

  # Returns the canonical Timezone instance for this Timezone.
  #
  # The IANA Time Zone database contains two types of definition: Zones and
  # Links. Zones are defined by rules that set out when transitions occur.
  # Links are just references to fully defined Zone, creating an alias for
  # that Zone.
  #
  # Links are commonly used where a time zone has been renamed in a
  # release of the Time Zone database. For example, the Zone US/Eastern was
  # renamed as America/New_York. A US/Eastern Link was added in its place,
  # linking to (and creating an alias for) for America/New_York.
  #
  # Links are also used for time zones that are currently identical to a full
  # Zone, but that are administered seperately. For example, Europe/Vatican is
  # a Link to (and alias for) Europe/Rome.
  #
  # For a full Zone, canonical_zone returns self.
  #
  # For a Link, canonical_zone returns a Timezone instance representing the
  # full Zone that the link targets.
  #
  # TZInfo can be used with different data sources (see the documentation for
  # TZInfo::DataSource). Please note that some DataSource implementations may
  # not support distinguishing between full Zones and Links and will treat all
  # time zones as full Zones. In this case, the canonical_zone will always
  # return self.
  #
  # There are two built-in DataSource implementations. RubyDataSource (which
  # will be used if the tzinfo-data gem is available) supports Link zones.
  # ZoneinfoDataSource returns Link zones as if they were full Zones. If the
  # canonical_zone or canonical_identifier methods are required, the
  # tzinfo-data gem should be installed.
  #
  # The TZInfo::DataSource.get method can be used to check which DataSource
  # implementation is being used.
  #
  # source://tzinfo//lib/tzinfo/timezone.rb#337
  def canonical_zone; end

  # Returns the TimezonePeriod for the current time.
  #
  # source://tzinfo//lib/tzinfo/timezone.rb#542
  def current_period; end

  # Returns the current Time and TimezonePeriod as an array. The first element
  # is the time, the second element is the period.
  #
  # source://tzinfo//lib/tzinfo/timezone.rb#548
  def current_period_and_time; end

  # Returns the current Time and TimezonePeriod as an array. The first element
  # is the time, the second element is the period.
  #
  # source://tzinfo//lib/tzinfo/timezone.rb#548
  def current_time_and_period; end

  # Returns true if and only if the identifier of tz is equal to the
  # identifier of this Timezone.
  #
  # @return [Boolean]
  #
  # source://tzinfo//lib/tzinfo/timezone.rb#627
  def eql?(tz); end

  # Returns a friendlier version of the identifier. Set skip_first_part to
  # omit the first part of the identifier (typically a region name) where
  # there is more than one part.
  #
  # For example:
  #
  #   Timezone.get('Europe/Paris').friendly_identifier(false)          #=> "Europe - Paris"
  #   Timezone.get('Europe/Paris').friendly_identifier(true)           #=> "Paris"
  #   Timezone.get('America/Indiana/Knox').friendly_identifier(false)  #=> "America - Knox, Indiana"
  #   Timezone.get('America/Indiana/Knox').friendly_identifier(true)   #=> "Knox, Indiana"
  #
  # source://tzinfo//lib/tzinfo/timezone.rb#231
  def friendly_identifier(skip_first_part = T.unsafe(nil)); end

  # Returns a hash of this Timezone.
  #
  # source://tzinfo//lib/tzinfo/timezone.rb#632
  def hash; end

  # The identifier of the timezone, e.g. "Europe/Paris".
  #
  # source://tzinfo//lib/tzinfo/timezone.rb#201
  def identifier; end

  # Returns internal object state as a programmer-readable string.
  #
  # source://tzinfo//lib/tzinfo/timezone.rb#217
  def inspect; end

  # Converts a time in the local timezone to UTC. local can either be
  # a DateTime, Time or timestamp (Time.to_i). The returned time has the same
  # type as local. Any timezone information in local is ignored (it is treated
  # as a local time).
  #
  # Warning: There are local times that have no equivalent UTC times (e.g.
  # in the transition from standard time to daylight savings time). There are
  # also local times that have more than one UTC equivalent (e.g. in the
  # transition from daylight savings time to standard time).
  #
  # In the first case (no equivalent UTC time), a PeriodNotFound exception
  # will be raised.
  #
  # In the second case (more than one equivalent UTC time), an AmbiguousTime
  # exception will be raised unless the optional dst parameter or block
  # handles the ambiguity.
  #
  # If the ambiguity is due to a transition from daylight savings time to
  # standard time, the dst parameter can be used to select whether the
  # daylight savings time or local time is used. For example,
  #
  #   Timezone.get('America/New_York').local_to_utc(DateTime.new(2004,10,31,1,30,0))
  #
  # would raise an AmbiguousTime exception.
  #
  # Specifying dst=true would return 2004-10-31 5:30:00. Specifying dst=false
  # would return 2004-10-31 6:30:00.
  #
  # If the dst parameter does not resolve the ambiguity, and a block is
  # specified, it is called. The block must take a single parameter - an
  # array of the periods that need to be resolved. The block can return a
  # single period to use to convert the time or return nil or an empty array
  # to cause an AmbiguousTime exception to be raised.
  #
  # The default value of the dst parameter can be specified by setting
  # Timezone.default_dst. If default_dst is not set, or is set to nil, then
  # an AmbiguousTime exception will be raised in ambiguous situations unless
  # a block is given to resolve the ambiguity.
  #
  # source://tzinfo//lib/tzinfo/timezone.rb#463
  def local_to_utc(local, dst = T.unsafe(nil)); end

  # An alias for identifier.
  #
  # source://tzinfo//lib/tzinfo/timezone.rb#206
  def name; end

  # Returns the current time in the timezone as a Time.
  #
  # source://tzinfo//lib/tzinfo/timezone.rb#537
  def now; end

  # Returns information about offsets used by the Timezone up to a given
  # date and time, specified using UTC (utc_to). The information is returned
  # as an Array of TimezoneOffset instances.
  #
  # A from date and time may also be supplied using the utc_from parameter
  # (also specified in UTC). If utc_from is not nil, only offsets used from
  # that date and time forward will be returned.
  #
  # Comparisons with utc_to are exclusive. Comparisons with utc_from are
  # inclusive.
  #
  # Offsets may be returned in any order.
  #
  # utc_to and utc_from can be specified using either DateTime, Time or
  # integer timestamps (Time.to_i).
  #
  # If utc_from is specified and utc_to is not greater than utc_from, then
  # offsets_up_to raises an ArgumentError exception.
  #
  # source://tzinfo//lib/tzinfo/timezone.rb#493
  def offsets_up_to(utc_to, utc_from = T.unsafe(nil)); end

  # Returns the TimezonePeriod for the given local time. local can either be
  # a DateTime, Time or integer timestamp (Time.to_i). Any timezone
  # information in local is ignored (it is treated as a time in the current
  # timezone).
  #
  # Warning: There are local times that have no equivalent UTC times (e.g.
  # in the transition from standard time to daylight savings time). There are
  # also local times that have more than one UTC equivalent (e.g. in the
  # transition from daylight savings time to standard time).
  #
  # In the first case (no equivalent UTC time), a PeriodNotFound exception
  # will be raised.
  #
  # In the second case (more than one equivalent UTC time), an AmbiguousTime
  # exception will be raised unless the optional dst parameter or block
  # handles the ambiguity.
  #
  # If the ambiguity is due to a transition from daylight savings time to
  # standard time, the dst parameter can be used to select whether the
  # daylight savings time or local time is used. For example,
  #
  #   Timezone.get('America/New_York').period_for_local(DateTime.new(2004,10,31,1,30,0))
  #
  # would raise an AmbiguousTime exception.
  #
  # Specifying dst=true would the daylight savings period from April to
  # October 2004. Specifying dst=false would return the standard period
  # from October 2004 to April 2005.
  #
  # If the dst parameter does not resolve the ambiguity, and a block is
  # specified, it is called. The block must take a single parameter - an
  # array of the periods that need to be resolved. The block can select and
  # return a single period or return nil or an empty array
  # to cause an AmbiguousTime exception to be raised.
  #
  # The default value of the dst parameter can be specified by setting
  # Timezone.default_dst. If default_dst is not set, or is set to nil, then
  # an AmbiguousTime exception will be raised in ambiguous situations unless
  # a block is given to resolve the ambiguity.
  #
  # source://tzinfo//lib/tzinfo/timezone.rb#380
  def period_for_local(local, dst = T.unsafe(nil)); end

  # Returns the TimezonePeriod for the given UTC time. utc can either be
  # a DateTime, Time or integer timestamp (Time.to_i). Any timezone
  # information in utc is ignored (it is treated as a UTC time).
  #
  # source://tzinfo//lib/tzinfo/timezone.rb#264
  def period_for_utc(utc); end

  # Returns the set of TimezonePeriod instances that are valid for the given
  # local time as an array. If you just want a single period, use
  # period_for_local instead and specify how ambiguities should be resolved.
  # Returns an empty array if no periods are found for the given time.
  #
  # source://tzinfo//lib/tzinfo/timezone.rb#272
  def periods_for_local(local); end

  # Converts a time in UTC to local time and returns it as a string according
  # to the given format.
  #
  # The formatting is identical to Time.strftime and DateTime.strftime, except
  # %Z and %z are replaced with the timezone abbreviation (for example, EST or
  # EDT) and offset for the specified Timezone and time.
  #
  # The offset can be formatted as follows:
  #
  # - %z - hour and minute (e.g. +0500)
  # - %:z - hour and minute separated with a colon (e.g. +05:00)
  # - %::z - hour minute and second separated with colons (e.g. +05:00:00)
  # - %:::z - hour only (e.g. +05)
  #
  # Timezone#strftime currently handles the replacement of %z. From TZInfo
  # version 2.0.0, %z will be passed to Time#strftime and DateTime#strftime
  # instead. Some of the formatting options may cease to be available
  # depending on the version of Ruby in use (for example, %:::z is only
  # supported by Time#strftime from MRI version 2.0.0 onwards.)
  #
  # source://tzinfo//lib/tzinfo/timezone.rb#575
  def strftime(format, utc = T.unsafe(nil)); end

  # Returns a friendlier version of the identifier.
  #
  # source://tzinfo//lib/tzinfo/timezone.rb#212
  def to_s; end

  # Returns an Array of TimezoneTransition instances representing the times
  # where the UTC offset of the timezone changes.
  #
  # Transitions are returned up to a given date and time up to a given date
  # and time, specified in UTC (utc_to).
  #
  # A from date and time may also be supplied using the utc_from parameter
  # (also specified in UTC). If utc_from is not nil, only transitions from
  # that date and time onwards will be returned.
  #
  # Comparisons with utc_to are exclusive. Comparisons with utc_from are
  # inclusive. If a transition falls precisely on utc_to, it will be excluded.
  # If a transition falls on utc_from, it will be included.
  #
  # Transitions returned are ordered by when they occur, from earliest to
  # latest.
  #
  # utc_to and utc_from can be specified using either DateTime, Time or
  # integer timestamps (Time.to_i).
  #
  # If utc_from is specified and utc_to is not greater than utc_from, then
  # transitions_up_to raises an ArgumentError exception.
  #
  # source://tzinfo//lib/tzinfo/timezone.rb#298
  def transitions_up_to(utc_to, utc_from = T.unsafe(nil)); end

  # Converts a time in UTC to the local timezone. utc can either be
  # a DateTime, Time or timestamp (Time.to_i). The returned time has the same
  # type as utc. Any timezone information in utc is ignored (it is treated as
  # a UTC time).
  #
  # source://tzinfo//lib/tzinfo/timezone.rb#419
  def utc_to_local(utc); end

  private

  # Raises an UnknownTimezone exception.
  #
  # @raise [UnknownTimezone]
  #
  # source://tzinfo//lib/tzinfo/timezone.rb#665
  def raise_unknown_timezone; end

  class << self
    # Loads a marshalled Timezone.
    #
    # source://tzinfo//lib/tzinfo/timezone.rb#642
    def _load(data); end

    # Returns an array containing all the available Timezones.
    #
    # Returns TimezoneProxy objects to avoid the overhead of loading Timezone
    # definitions until a conversion is actually required.
    #
    # source://tzinfo//lib/tzinfo/timezone.rb#123
    def all; end

    # Returns all the zone identifiers defined for all Countries. This is not the
    # complete set of zone identifiers as some are not country specific (e.g.
    # 'Etc/GMT'). You can obtain a Timezone instance for a given identifier
    # with the get method.
    #
    # source://tzinfo//lib/tzinfo/timezone.rb#179
    def all_country_zone_identifiers; end

    # Returns all the Timezones defined for all Countries. This is not the
    # complete set of Timezones as some are not country specific (e.g.
    # 'Etc/GMT').
    #
    # Returns TimezoneProxy objects to avoid the overhead of loading Timezone
    # definitions until a conversion is actually required.
    #
    # source://tzinfo//lib/tzinfo/timezone.rb#169
    def all_country_zones; end

    # Returns an array containing the identifiers of all the available
    # Timezones that are based on data (are not links to other Timezones)..
    #
    # source://tzinfo//lib/tzinfo/timezone.rb#144
    def all_data_zone_identifiers; end

    # Returns an array containing all the available Timezones that are based
    # on data (are not links to other Timezones).
    #
    # Returns TimezoneProxy objects to avoid the overhead of loading Timezone
    # definitions until a conversion is actually required.
    #
    # source://tzinfo//lib/tzinfo/timezone.rb#138
    def all_data_zones; end

    # Returns an array containing the identifiers of all the available
    # Timezones.
    #
    # source://tzinfo//lib/tzinfo/timezone.rb#129
    def all_identifiers; end

    # Returns an array containing the identifiers of all the available
    # Timezones that are links to other Timezones.
    #
    # source://tzinfo//lib/tzinfo/timezone.rb#159
    def all_linked_zone_identifiers; end

    # Returns an array containing all the available Timezones that are links
    # to other Timezones.
    #
    # Returns TimezoneProxy objects to avoid the overhead of loading Timezone
    # definitions until a conversion is actually required.
    #
    # source://tzinfo//lib/tzinfo/timezone.rb#153
    def all_linked_zones; end

    # Returns the current DataSource.
    #
    # source://tzinfo//lib/tzinfo/timezone.rb#660
    def data_source; end

    # Gets the default value of the optional dst parameter of the
    # local_to_utc and period_for_local methods. Can be set to nil, true or
    # false.
    #
    # source://tzinfo//lib/tzinfo/timezone.rb#73
    def default_dst; end

    # Sets the default value of the optional dst parameter of the
    # local_to_utc and period_for_local methods. Can be set to nil, true or
    # false.
    #
    # The value of default_dst defaults to nil if unset.
    #
    # source://tzinfo//lib/tzinfo/timezone.rb#66
    def default_dst=(value); end

    # Returns a timezone by its identifier (e.g. "Europe/London",
    # "America/Chicago" or "UTC").
    #
    # Raises InvalidTimezoneIdentifier if the timezone couldn't be found.
    #
    # source://tzinfo//lib/tzinfo/timezone.rb#81
    def get(identifier); end

    # Returns an array of proxies corresponding to the given array of
    # identifiers.
    #
    # source://tzinfo//lib/tzinfo/timezone.rb#655
    def get_proxies(identifiers); end

    # Returns a proxy for the Timezone with the given identifier. The proxy
    # will cause the real timezone to be loaded when an attempt is made to
    # find a period or convert a time. get_proxy will not validate the
    # identifier. If an invalid identifier is specified, no exception will be
    # raised until the proxy is used.
    #
    # source://tzinfo//lib/tzinfo/timezone.rb#105
    def get_proxy(identifier); end

    # Initializes @@loaded_zones.
    #
    # source://tzinfo//lib/tzinfo/timezone.rb#648
    def init_loaded_zones; end

    # If identifier is nil calls super(), otherwise calls get. An identfier
    # should always be passed in when called externally.
    #
    # source://tzinfo//lib/tzinfo/timezone.rb#111
    def new(identifier = T.unsafe(nil)); end

    # Returns all US zone identifiers. A shortcut for
    # TZInfo::Country.get('US').zone_identifiers.
    #
    # source://tzinfo//lib/tzinfo/timezone.rb#196
    def us_zone_identifiers; end

    # Returns all US Timezone instances. A shortcut for
    # TZInfo::Country.get('US').zones.
    #
    # Returns TimezoneProxy objects to avoid the overhead of loading Timezone
    # definitions until a conversion is actually required.
    #
    # source://tzinfo//lib/tzinfo/timezone.rb#190
    def us_zones; end
  end
end

# TimezoneDefinition is included into Timezone definition modules.
# TimezoneDefinition provides the methods for defining timezones.
#
# @private
#
# source://tzinfo//lib/tzinfo/timezone_definition.rb#7
module TZInfo::TimezoneDefinition
  mixes_in_class_methods ::TZInfo::TimezoneDefinition::ClassMethods

  class << self
    # Add class methods to the includee.
    #
    # source://tzinfo//lib/tzinfo/timezone_definition.rb#9
    def append_features(base); end
  end
end

# Class methods for inclusion.
#
# @private
#
# source://tzinfo//lib/tzinfo/timezone_definition.rb#17
module TZInfo::TimezoneDefinition::ClassMethods
  # Returns the last TimezoneInfo to be defined with timezone or
  # linked_timezone.
  #
  # source://tzinfo//lib/tzinfo/timezone_definition.rb#31
  def get; end

  # Defines a linked timezone.
  #
  # source://tzinfo//lib/tzinfo/timezone_definition.rb#25
  def linked_timezone(identifier, link_to_identifier); end

  # Returns and yields a TransitionDataTimezoneInfo object to define a
  # timezone.
  #
  # @yield [@timezone = TransitionDataTimezoneInfo.new(identifier)]
  #
  # source://tzinfo//lib/tzinfo/timezone_definition.rb#20
  def timezone(identifier); end
end

# The timezone index file includes TimezoneIndexDefinition which provides
# methods used to define timezones in the index.
#
# @private
#
# source://tzinfo//lib/tzinfo/timezone_index_definition.rb#6
module TZInfo::TimezoneIndexDefinition
  mixes_in_class_methods ::TZInfo::TimezoneIndexDefinition::ClassMethods

  class << self
    # Add class methods to the includee and initialize class instance variables.
    #
    # source://tzinfo//lib/tzinfo/timezone_index_definition.rb#8
    def append_features(base); end
  end
end

# Class methods for inclusion.
#
# @private
#
# source://tzinfo//lib/tzinfo/timezone_index_definition.rb#21
module TZInfo::TimezoneIndexDefinition::ClassMethods
  # Returns a frozen array containing the identifiers of all data timezones.
  # Identifiers appear in the order they were defined in the index.
  #
  # source://tzinfo//lib/tzinfo/timezone_index_definition.rb#42
  def data_timezones; end

  # Defines a timezone which is a link to another timezone.
  #
  # source://tzinfo//lib/tzinfo/timezone_index_definition.rb#29
  def linked_timezone(identifier); end

  # Returns a frozen array containing the identifiers of all linked
  # timezones. Identifiers appear in the order they were defined in
  # the index.
  #
  # source://tzinfo//lib/tzinfo/timezone_index_definition.rb#49
  def linked_timezones; end

  # Defines a timezone based on data.
  #
  # source://tzinfo//lib/tzinfo/timezone_index_definition.rb#23
  def timezone(identifier); end

  # Returns a frozen array containing the identifiers of all the timezones.
  # Identifiers appear in the order they were defined in the index.
  #
  # source://tzinfo//lib/tzinfo/timezone_index_definition.rb#36
  def timezones; end
end

# Represents a timezone defined by a data source.
#
# source://tzinfo//lib/tzinfo/timezone_info.rb#3
class TZInfo::TimezoneInfo
  # Constructs a new TimezoneInfo with an identifier.
  #
  # @return [TimezoneInfo] a new instance of TimezoneInfo
  #
  # source://tzinfo//lib/tzinfo/timezone_info.rb#9
  def initialize(identifier); end

  # Constructs a Timezone instance for the timezone represented by this
  # TimezoneInfo.
  #
  # source://tzinfo//lib/tzinfo/timezone_info.rb#20
  def create_timezone; end

  # The timezone identifier.
  #
  # source://tzinfo//lib/tzinfo/timezone_info.rb#6
  def identifier; end

  # Returns internal object state as a programmer-readable string.
  #
  # source://tzinfo//lib/tzinfo/timezone_info.rb#14
  def inspect; end

  private

  # @raise [NotImplementedError]
  #
  # source://tzinfo//lib/tzinfo/timezone_info.rb#26
  def raise_not_implemented(method_name); end
end

# Represents an offset defined in a Timezone data file.
#
# source://tzinfo//lib/tzinfo/timezone_offset.rb#3
class TZInfo::TimezoneOffset
  # Constructs a new TimezoneOffset. utc_offset and std_offset are specified
  # in seconds.
  #
  # @return [TimezoneOffset] a new instance of TimezoneOffset
  #
  # source://tzinfo//lib/tzinfo/timezone_offset.rb#45
  def initialize(utc_offset, std_offset, abbreviation); end

  # Returns true if and only if toi has the same utc_offset, std_offset
  # and abbreviation as this TimezoneOffset.
  #
  # source://tzinfo//lib/tzinfo/timezone_offset.rb#80
  def ==(toi); end

  # The abbreviation that identifies this observance, e.g. "GMT"
  # (Greenwich Mean Time) or "BST" (British Summer Time) for "Europe/London". The returned identifier is a
  # symbol.
  #
  # source://tzinfo//lib/tzinfo/timezone_offset.rb#41
  def abbreviation; end

  # True if std_offset is non-zero.
  #
  # @return [Boolean]
  #
  # source://tzinfo//lib/tzinfo/timezone_offset.rb#54
  def dst?; end

  # Returns true if and only if toi has the same utc_offset, std_offset
  # and abbreviation as this TimezoneOffset.
  #
  # @return [Boolean]
  #
  # source://tzinfo//lib/tzinfo/timezone_offset.rb#87
  def eql?(toi); end

  # Returns a hash of this TimezoneOffset.
  #
  # source://tzinfo//lib/tzinfo/timezone_offset.rb#92
  def hash; end

  # Returns internal object state as a programmer-readable string.
  #
  # source://tzinfo//lib/tzinfo/timezone_offset.rb#97
  def inspect; end

  # The offset from the time zone's standard time in seconds. Zero
  # when daylight savings time is not in effect. Non-zero (usually 3600 = 1
  # hour) if daylight savings is being observed.
  #
  # Note that zoneinfo files only include the value of utc_total_offset and
  # a DST flag. When using DataSources::ZoneinfoDataSource, the std_offset
  # will be derived from changes to the UTC total offset and the DST flag. As
  # a consequence, utc_total_offset will always be correct, but std_offset
  # may be inaccurate.
  #
  # If you require std_offset to be accurate, install the tzinfo-data gem
  # and set RubyDataSource as the DataSource.
  #
  # source://tzinfo//lib/tzinfo/timezone_offset.rb#32
  def std_offset; end

  # Converts a UTC Time, DateTime or integer timestamp to local time, based on
  # the offset of this period.
  #
  # Deprecation warning: this method will be removed in TZInfo version 2.0.0.
  #
  # source://tzinfo//lib/tzinfo/timezone_offset.rb#62
  def to_local(utc); end

  # Converts a local Time, DateTime or integer timestamp to UTC, based on the
  # offset of this period.
  #
  # Deprecation warning: this method will be removed in TZInfo version 2.0.0.
  #
  # source://tzinfo//lib/tzinfo/timezone_offset.rb#72
  def to_utc(local); end

  # The base offset of the timezone from UTC in seconds. This does not include
  # any adjustment made for daylight savings time and will typically remain
  # constant throughout the year.
  #
  # To obtain the currently observed offset from UTC, including the effect of
  # daylight savings time, use utc_total_offset instead.
  #
  # Note that zoneinfo files only include the value of utc_total_offset and a
  # DST flag. When using ZoneinfoDataSource, the utc_offset will be derived
  # from changes to the UTC total offset and the DST flag. As a consequence,
  # utc_total_offset will always be correct, but utc_offset may be inaccurate.
  #
  # If you require utc_offset to be accurate, install the tzinfo-data gem and
  # set RubyDataSource as the DataSource.
  #
  # source://tzinfo//lib/tzinfo/timezone_offset.rb#18
  def utc_offset; end

  # The total offset of this observance from UTC in seconds
  # (utc_offset + std_offset).
  #
  # source://tzinfo//lib/tzinfo/timezone_offset.rb#36
  def utc_total_offset; end
end

# A period of time in a timezone where the same offset from UTC applies.
#
# All the methods that take times accept instances of Time or DateTime as well
# as Integer timestamps.
#
# source://tzinfo//lib/tzinfo/timezone_period.rb#6
class TZInfo::TimezonePeriod
  # Initializes a new TimezonePeriod.
  #
  # TimezonePeriod instances should not normally be constructed manually.
  #
  # @return [TimezonePeriod] a new instance of TimezonePeriod
  #
  # source://tzinfo//lib/tzinfo/timezone_period.rb#21
  def initialize(start_transition, end_transition, offset = T.unsafe(nil)); end

  # Returns true if this TimezonePeriod is equal to p. This compares the
  # start_transition, end_transition and offset using ==.
  #
  # source://tzinfo//lib/tzinfo/timezone_period.rb#215
  def ==(p); end

  # The identifier of this period, e.g. "GMT" (Greenwich Mean Time) or "BST"
  # (British Summer Time) for "Europe/London". The returned identifier is a
  # symbol.
  #
  # source://tzinfo//lib/tzinfo/timezone_period.rb#78
  def abbreviation; end

  # true if daylight savings is in effect for this period; otherwise false.
  #
  # @return [Boolean]
  #
  # source://tzinfo//lib/tzinfo/timezone_period.rb#148
  def dst?; end

  # The TimezoneTransition that defines the end of this TimezonePeriod
  # (may be nil if unbounded).
  #
  # source://tzinfo//lib/tzinfo/timezone_period.rb#13
  def end_transition; end

  # Returns true if this TimezonePeriods is equal to p. This compares the
  # start_transition, end_transition and offset using eql?
  #
  # @return [Boolean]
  #
  # source://tzinfo//lib/tzinfo/timezone_period.rb#224
  def eql?(p); end

  # Returns a hash of this TimezonePeriod.
  #
  # source://tzinfo//lib/tzinfo/timezone_period.rb#232
  def hash; end

  # Returns internal object state as a programmer-readable string.
  #
  # source://tzinfo//lib/tzinfo/timezone_period.rb#239
  def inspect; end

  # true if the given local DateTime is after the start of the period
  # (inclusive); otherwise false.
  #
  # Deprecation warning: this method will be removed in TZInfo version 2.0.0.
  #
  # @return [Boolean]
  #
  # source://tzinfo//lib/tzinfo/timezone_period.rb#187
  def local_after_start?(local); end

  # true if the given local DateTime is before the end of the period
  # (exclusive); otherwise false.
  #
  # Deprecation warning: this method will be removed in TZInfo version 2.0.0.
  #
  # @return [Boolean]
  #
  # source://tzinfo//lib/tzinfo/timezone_period.rb#195
  def local_before_end?(local); end

  # The end time of the period in local time as a DateTime. May be nil if
  # unbounded.
  #
  # source://tzinfo//lib/tzinfo/timezone_period.rb#137
  def local_end; end

  # The end time of the period in local time as a Time. May be nil if
  # unbounded.
  #
  # source://tzinfo//lib/tzinfo/timezone_period.rb#143
  def local_end_time; end

  # The start time of the period in local time as a DateTime. May be nil if
  # unbounded.
  #
  # source://tzinfo//lib/tzinfo/timezone_period.rb#125
  def local_start; end

  # The start time of the period in local time as a Time. May be nil if
  # unbounded.
  #
  # source://tzinfo//lib/tzinfo/timezone_period.rb#131
  def local_start_time; end

  # The TimezoneOffset for this period.
  #
  # source://tzinfo//lib/tzinfo/timezone_period.rb#16
  def offset; end

  # The TimezoneTransition that defines the start of this TimezonePeriod
  # (may be nil if unbounded).
  #
  # source://tzinfo//lib/tzinfo/timezone_period.rb#9
  def start_transition; end

  # The offset from the time zone's standard time in seconds. Zero
  # when daylight savings time is not in effect. Non-zero (usually 3600 = 1
  # hour) if daylight savings is being observed.
  #
  # Note that zoneinfo files only include the value of utc_total_offset and
  # a DST flag. When using DataSources::ZoneinfoDataSource, the std_offset
  # will be derived from changes to the UTC total offset and the DST flag. As
  # a consequence, utc_total_offset will always be correct, but std_offset
  # may be inaccurate.
  #
  # If you require std_offset to be accurate, install the tzinfo-data gem
  # and set RubyDataSource as the DataSource.
  #
  # source://tzinfo//lib/tzinfo/timezone_period.rb#71
  def std_offset; end

  # Converts a UTC DateTime to local time based on the offset of this period.
  #
  # Deprecation warning: this method will be removed in TZInfo version 2.0.0.
  #
  # source://tzinfo//lib/tzinfo/timezone_period.rb#202
  def to_local(utc); end

  # Converts a local DateTime to UTC based on the offset of this period.
  #
  # Deprecation warning: this method will be removed in TZInfo version 2.0.0.
  #
  # source://tzinfo//lib/tzinfo/timezone_period.rb#209
  def to_utc(local); end

  # true if the given UTC DateTime is after the start of the period
  # (inclusive); otherwise false.
  #
  # Deprecation warning: this method will be removed in TZInfo version 2.0.0.
  #
  # @return [Boolean]
  #
  # source://tzinfo//lib/tzinfo/timezone_period.rb#163
  def utc_after_start?(utc); end

  # true if the given UTC DateTime is before the end of the period
  # (exclusive); otherwise false.
  #
  # Deprecation warning: this method will be removed in TZInfo version 2.0.0.
  #
  # @return [Boolean]
  #
  # source://tzinfo//lib/tzinfo/timezone_period.rb#171
  def utc_before_end?(utc); end

  # The end time of the period in UTC as a DateTime. May be nil if unbounded.
  #
  # source://tzinfo//lib/tzinfo/timezone_period.rb#114
  def utc_end; end

  # The end time of the period in UTC as a Time. May be nil if unbounded.
  #
  # source://tzinfo//lib/tzinfo/timezone_period.rb#119
  def utc_end_time; end

  # The base offset of the timezone from UTC in seconds. This does not include
  # any adjustment made for daylight savings time and will typically remain
  # constant throughout the year.
  #
  # To obtain the currently observed offset from UTC, including the effect of
  # daylight savings time, use utc_total_offset instead.
  #
  # Note that zoneinfo files only include the value of utc_total_offset and a
  # DST flag. When using ZoneinfoDataSource, the utc_offset will be derived
  # from changes to the UTC total offset and the DST flag. As a consequence,
  # utc_total_offset will always be correct, but utc_offset may be inaccurate.
  #
  # If you require utc_offset to be accurate, install the tzinfo-data gem and
  # set RubyDataSource as the DataSource.
  #
  # source://tzinfo//lib/tzinfo/timezone_period.rb#55
  def utc_offset; end

  # The start time of the period in UTC as a DateTime. May be nil if unbounded.
  #
  # source://tzinfo//lib/tzinfo/timezone_period.rb#104
  def utc_start; end

  # The start time of the period in UTC as a Time. May be nil if unbounded.
  #
  # source://tzinfo//lib/tzinfo/timezone_period.rb#109
  def utc_start_time; end

  # Total offset from UTC (seconds). Equal to utc_offset + std_offset.
  #
  # source://tzinfo//lib/tzinfo/timezone_period.rb#84
  def utc_total_offset; end

  # Total offset from UTC (days). Result is a Rational.
  #
  # source://tzinfo//lib/tzinfo/timezone_period.rb#89
  def utc_total_offset_rational; end

  # true if this period is valid for the given local DateTime; otherwise
  # false.
  #
  # Deprecation warning: this method will be removed in TZInfo version 2.0.0.
  #
  # @return [Boolean]
  #
  # source://tzinfo//lib/tzinfo/timezone_period.rb#179
  def valid_for_local?(local); end

  # true if this period is valid for the given UTC DateTime; otherwise false.
  #
  # Deprecation warning: this method will be removed in TZInfo version 2.0.0.
  #
  # @return [Boolean]
  #
  # source://tzinfo//lib/tzinfo/timezone_period.rb#155
  def valid_for_utc?(utc); end

  # The identifier of this period, e.g. "GMT" (Greenwich Mean Time) or "BST"
  # (British Summer Time) for "Europe/London". The returned identifier is a
  # symbol.
  #
  # source://tzinfo//lib/tzinfo/timezone_period.rb#78
  def zone_identifier; end
end

# A proxy class representing a timezone with a given identifier. TimezoneProxy
# inherits from Timezone and can be treated like any Timezone loaded with
# Timezone.get.
#
# The first time an attempt is made to access the data for the timezone, the
# real Timezone is loaded. If the proxy's identifier was not valid, then an
# exception will be raised at this point.
#
# source://tzinfo//lib/tzinfo/timezone_proxy.rb#13
class TZInfo::TimezoneProxy < ::TZInfo::Timezone
  # Dumps this TimezoneProxy for marshalling.
  #
  # source://tzinfo//lib/tzinfo/timezone_proxy.rb#76
  def _dump(limit); end

  # Returns the canonical zone for this Timezone.
  #
  # source://tzinfo//lib/tzinfo/timezone_proxy.rb#71
  def canonical_zone; end

  # The identifier of the timezone, e.g. "Europe/Paris".
  #
  # source://tzinfo//lib/tzinfo/timezone_proxy.rb#22
  def identifier; end

  # Returns the TimezonePeriod for the given UTC time. utc can either be
  # a DateTime, Time or integer timestamp (Time.to_i). Any timezone
  # information in utc is ignored (it is treated as a UTC time).
  #
  # source://tzinfo//lib/tzinfo/timezone_proxy.rb#29
  def period_for_utc(utc); end

  # Returns the set of TimezonePeriod instances that are valid for the given
  # local time as an array. If you just want a single period, use
  # period_for_local instead and specify how abiguities should be resolved.
  # Returns an empty array if no periods are found for the given time.
  #
  # source://tzinfo//lib/tzinfo/timezone_proxy.rb#37
  def periods_for_local(local); end

  # Returns an Array of TimezoneTransition instances representing the times
  # where the UTC offset of the timezone changes.
  #
  # Transitions are returned up to a given date and time up to a given date
  # and time (to).
  #
  # A from date and time may also be supplied using the from parameter. If
  # from is not nil, only transitions from that date and time onwards will be
  # returned.
  #
  # Comparisons with to are exclusive. Comparisons with from are inclusive.
  # If a transition falls precisely on to, it will be excluded. If a
  # transition falls on from, it will be included.
  #
  # Transitions returned are ordered by when they occur, from earliest to
  # latest.
  #
  # to and from can be specified using either a Time, DateTime, Time or
  # Timestamp.
  #
  # If from is specified and to is not greater than from, then an
  # ArgumentError exception is raised.
  #
  # ArgumentError is raised if to is nil or of either to or from are
  # Timestamps with unspecified offsets.
  #
  # source://tzinfo//lib/tzinfo/timezone_proxy.rb#66
  def transitions_up_to(to, from = T.unsafe(nil)); end

  private

  # source://tzinfo//lib/tzinfo/timezone_proxy.rb#91
  def real_timezone; end

  # source://tzinfo//lib/tzinfo/timezone_proxy.rb#86
  def setup(identifier); end

  class << self
    # Loads a marshalled TimezoneProxy.
    #
    # source://tzinfo//lib/tzinfo/timezone_proxy.rb#81
    def _load(data); end

    # Construct a new TimezoneProxy for the given identifier. The identifier
    # is not checked when constructing the proxy. It will be validated on the
    # when the real Timezone is loaded.
    #
    # source://tzinfo//lib/tzinfo/timezone_proxy.rb#14
    def new(identifier); end
  end
end

# Represents a transition from one timezone offset to another at a particular
# date and time.
#
# source://tzinfo//lib/tzinfo/timezone_transition.rb#4
class TZInfo::TimezoneTransition
  # Initializes a new TimezoneTransition.
  #
  # TimezoneTransition instances should not normally be constructed manually.
  #
  # @return [TimezoneTransition] a new instance of TimezoneTransition
  #
  # source://tzinfo//lib/tzinfo/timezone_transition.rb#14
  def initialize(offset, previous_offset); end

  # Returns true if this TimezoneTransition is equal to the given
  # TimezoneTransition. Two TimezoneTransition instances are
  # considered to be equal by == if offset, previous_offset and at are all
  # equal.
  #
  # source://tzinfo//lib/tzinfo/timezone_transition.rb#100
  def ==(tti); end

  # A TimeOrDateTime instance representing the UTC time when this transition
  # occurs.
  #
  # source://tzinfo//lib/tzinfo/timezone_transition.rb#23
  def at; end

  # The UTC time when this transition occurs, returned as a DateTime instance.
  #
  # source://tzinfo//lib/tzinfo/timezone_transition.rb#28
  def datetime; end

  # Returns true if this TimezoneTransition is equal to the given
  # TimezoneTransition. Two TimezoneTransition instances are
  # considered to be equal by eql? if offset, previous_offset and at are all
  # equal and the type used to define at in both instances is the same.
  #
  # @return [Boolean]
  #
  # source://tzinfo//lib/tzinfo/timezone_transition.rb#109
  def eql?(tti); end

  # Returns a hash of this TimezoneTransition instance.
  #
  # source://tzinfo//lib/tzinfo/timezone_transition.rb#115
  def hash; end

  # Returns internal object state as a programmer-readable string.
  #
  # source://tzinfo//lib/tzinfo/timezone_transition.rb#120
  def inspect; end

  # The local time when this transition causes the previous observance to end,
  # returned as a DateTime instance.
  #
  # source://tzinfo//lib/tzinfo/timezone_transition.rb#57
  def local_end; end

  # A TimeOrDateTime instance representing the local time when this transition
  # causes the previous observance to end (calculated from at using
  # previous_offset).
  #
  # source://tzinfo//lib/tzinfo/timezone_transition.rb#40
  def local_end_at; end

  # The local time when this transition causes the previous observance to end,
  # returned as a Time instance.
  #
  # source://tzinfo//lib/tzinfo/timezone_transition.rb#63
  def local_end_time; end

  # The local time when this transition causes the next observance to start,
  # returned as a DateTime instance.
  #
  # source://tzinfo//lib/tzinfo/timezone_transition.rb#86
  def local_start; end

  # A TimeOrDateTime instance representing the local time when this transition
  # causes the next observance to start (calculated from at using offset).
  #
  # source://tzinfo//lib/tzinfo/timezone_transition.rb#69
  def local_start_at; end

  # The local time when this transition causes the next observance to start,
  # returned as a Time instance.
  #
  # source://tzinfo//lib/tzinfo/timezone_transition.rb#92
  def local_start_time; end

  # The offset this transition changes to (a TimezoneOffset instance).
  #
  # source://tzinfo//lib/tzinfo/timezone_transition.rb#6
  def offset; end

  # The offset this transition changes from (a TimezoneOffset instance).
  #
  # source://tzinfo//lib/tzinfo/timezone_transition.rb#9
  def previous_offset; end

  # The UTC time when this transition occurs, returned as a Time instance.
  #
  # source://tzinfo//lib/tzinfo/timezone_transition.rb#33
  def time; end

  private

  # @raise [NotImplementedError]
  #
  # source://tzinfo//lib/tzinfo/timezone_transition.rb#126
  def raise_not_implemented(method_name); end
end

# A TimezoneTransition defined by as integer timestamp, as a rational to
# create a DateTime or as both.
#
# @private
#
# source://tzinfo//lib/tzinfo/timezone_transition_definition.rb#8
class TZInfo::TimezoneTransitionDefinition < ::TZInfo::TimezoneTransition
  # Creates a new TimezoneTransitionDefinition with the given offset,
  # previous_offset (both TimezoneOffset instances) and UTC time.
  #
  # The time can be specified as a timestamp, as a rational to create a
  # DateTime, or as both.
  #
  # If both a timestamp and rational are given, then the rational will only
  # be used if the timestamp falls outside of the range of Time on the
  # platform being used at runtime.
  #
  # DateTimes are created from the rational as follows:
  #
  #  RubyCoreSupport.datetime_new!(RubyCoreSupport.rational_new!(numerator, denominator), 0, Date::ITALY)
  #
  # For performance reasons, the numerator and denominator must be specified
  # in their lowest form.
  #
  # @return [TimezoneTransitionDefinition] a new instance of TimezoneTransitionDefinition
  #
  # source://tzinfo//lib/tzinfo/timezone_transition_definition.rb#33
  def initialize(offset, previous_offset, numerator_or_timestamp, denominator_or_numerator = T.unsafe(nil), denominator = T.unsafe(nil)); end

  # A TimeOrDateTime instance representing the UTC time when this transition
  # occurs.
  #
  # source://tzinfo//lib/tzinfo/timezone_transition_definition.rb#68
  def at; end

  # Returns true if this TimezoneTransitionDefinition is equal to the given
  # TimezoneTransitionDefinition. Two TimezoneTransitionDefinition instances
  # are considered to be equal by eql? if offset, previous_offset,
  # numerator_or_time and denominator are all equal.
  #
  # @return [Boolean]
  #
  # source://tzinfo//lib/tzinfo/timezone_transition_definition.rb#93
  def eql?(tti); end

  # Returns a hash of this TimezoneTransitionDefinition instance.
  #
  # source://tzinfo//lib/tzinfo/timezone_transition_definition.rb#100
  def hash; end

  protected

  # Either the denominator of the DateTime if the transition time is defined
  # as a DateTime, otherwise nil.
  #
  # source://tzinfo//lib/tzinfo/timezone_transition_definition.rb#14
  def denominator; end

  # The numerator of the DateTime if the transition time is defined as a
  # DateTime, otherwise the transition time as a timestamp.
  #
  # source://tzinfo//lib/tzinfo/timezone_transition_definition.rb#9
  def numerator_or_time; end
end

# Represents a data timezone defined by a set of offsets and a set
# of transitions.
#
# @private
#
# source://tzinfo//lib/tzinfo/transition_data_timezone_info.rb#11
class TZInfo::TransitionDataTimezoneInfo < ::TZInfo::DataTimezoneInfo
  # Constructs a new TransitionDataTimezoneInfo with its identifier.
  #
  # @return [TransitionDataTimezoneInfo] a new instance of TransitionDataTimezoneInfo
  #
  # source://tzinfo//lib/tzinfo/transition_data_timezone_info.rb#14
  def initialize(identifier); end

  # Defines a offset. The id uniquely identifies this offset within the
  # timezone. utc_offset and std_offset define the offset in seconds of
  # standard time from UTC and daylight savings from standard time
  # respectively. abbreviation describes the timezone offset (e.g. GMT, BST,
  # EST or EDT).
  #
  # The first offset to be defined is treated as the offset that applies
  # until the first transition. This will usually be in Local Mean Time (LMT).
  #
  # ArgumentError will be raised if the id is already defined.
  #
  # @raise [ArgumentError]
  #
  # source://tzinfo//lib/tzinfo/transition_data_timezone_info.rb#32
  def offset(id, utc_offset, std_offset, abbreviation); end

  # Returns the TimezonePeriod for the given UTC time.
  # Raises NoOffsetsDefined if no offsets have been defined.
  #
  # source://tzinfo//lib/tzinfo/transition_data_timezone_info.rb#79
  def period_for_utc(utc); end

  # Returns the set of TimezonePeriods for the given local time as an array.
  # Results returned are ordered by increasing UTC start date.
  # Returns an empty array if no periods are found for the given time.
  # Raises NoOffsetsDefined if no offsets have been defined.
  #
  # source://tzinfo//lib/tzinfo/transition_data_timezone_info.rb#123
  def periods_for_local(local); end

  # Defines a transition. Transitions must be defined in chronological order.
  # ArgumentError will be raised if a transition is added out of order.
  # offset_id refers to an id defined with offset. ArgumentError will be
  # raised if the offset_id cannot be found. numerator_or_time and
  # denomiator specify the time the transition occurs as. See
  # TimezoneTransition for more detail about specifying times.
  #
  # @raise [ArgumentError]
  #
  # source://tzinfo//lib/tzinfo/transition_data_timezone_info.rb#46
  def transition(year, month, offset_id, numerator_or_timestamp, denominator_or_numerator = T.unsafe(nil), denominator = T.unsafe(nil)); end

  # Returns an Array of TimezoneTransition instances representing the times
  # where the UTC offset of the timezone changes.
  #
  # Transitions are returned up to a given date and time up to a given date
  # and time, specified in UTC (utc_to).
  #
  # A from date and time may also be supplied using the utc_from parameter
  # (also specified in UTC). If utc_from is not nil, only transitions from
  # that date and time onwards will be returned.
  #
  # Comparisons with utc_to are exclusive. Comparisons with utc_from are
  # inclusive. If a transition falls precisely on utc_to, it will be excluded.
  # If a transition falls on utc_from, it will be included.
  #
  # Transitions returned are ordered by when they occur, from earliest to
  # latest.
  #
  # utc_to and utc_from can be specified using either DateTime, Time or
  # integer timestamps (Time.to_i).
  #
  # If utc_from is specified and utc_to is not greater than utc_from, then
  # transitions_up_to raises an ArgumentError exception.
  #
  # source://tzinfo//lib/tzinfo/transition_data_timezone_info.rb#188
  def transitions_up_to(utc_to, utc_from = T.unsafe(nil)); end

  private

  # Returns the index into @transitions of the first transition that occurs
  # on or after the start of the given index into @transitions_index.
  # Returns nil if there are no such transitions.
  #
  # source://tzinfo//lib/tzinfo/transition_data_timezone_info.rb#250
  def transition_after_start(index); end

  # Returns the index into @transitions of the first transition that occurs
  # before the end of the given index into @transitions_index.
  # Returns nil if there are no such transitions.
  #
  # source://tzinfo//lib/tzinfo/transition_data_timezone_info.rb#262
  def transition_before_end(index); end

  # Returns the index into the @transitions_index array for a given year
  # and month.
  #
  # source://tzinfo//lib/tzinfo/transition_data_timezone_info.rb#240
  def transition_index(year, month); end
end

# Raised if an attempt is made to use a timezone created with
# Timezone.new(nil).
#
# source://tzinfo//lib/tzinfo/timezone.rb#27
class TZInfo::UnknownTimezone < ::StandardError; end

# Represents information about a country returned by ZoneinfoDataSource.
#
# @private
#
# source://tzinfo//lib/tzinfo/zoneinfo_country_info.rb#7
class TZInfo::ZoneinfoCountryInfo < ::TZInfo::CountryInfo
  # Constructs a new CountryInfo with an ISO 3166 country code, name and
  # an array of CountryTimezones.
  #
  # @return [ZoneinfoCountryInfo] a new instance of ZoneinfoCountryInfo
  #
  # source://tzinfo//lib/tzinfo/zoneinfo_country_info.rb#8
  def initialize(code, name, zones); end

  # Returns a frozen array of all the zone identifiers for the country ordered
  # geographically, most populous first.
  #
  # source://tzinfo//lib/tzinfo/zoneinfo_country_info.rb#16
  def zone_identifiers; end

  # Returns a frozen array of all the timezones for the for the country
  # ordered geographically, most populous first.
  #
  # source://tzinfo//lib/tzinfo/zoneinfo_country_info.rb#33
  def zones; end
end

# A DataSource that loads data from a 'zoneinfo' directory containing
# compiled "TZif" version 3 (or earlier) files in addition to iso3166.tab and
# zone1970.tab or zone.tab index files.
#
# To have TZInfo load the system zoneinfo files, call TZInfo::DataSource.set
# as follows:
#
#   TZInfo::DataSource.set(:zoneinfo)
#
# To load zoneinfo files from a particular directory, pass the directory to
# TZInfo::DataSource.set:
#
#   TZInfo::DataSource.set(:zoneinfo, directory)
#
# Note that the platform used at runtime may limit the range of available
# transition data that can be loaded from zoneinfo files. There are two
# factors to consider:
#
# First of all, the zoneinfo support in TZInfo makes use of Ruby's Time class.
# On 32-bit builds of Ruby 1.8, the Time class only supports 32-bit
# timestamps. This means that only Times between 1901-12-13 20:45:52 and
# 2038-01-19 03:14:07 can be represented. Furthermore, certain platforms only
# allow for positive 32-bit timestamps (notably Windows), making the earliest
# representable time 1970-01-01 00:00:00.
#
# 64-bit builds of Ruby 1.8 and all builds of Ruby 1.9 support 64-bit
# timestamps. This means that there is no practical restriction on the range
# of the Time class on these platforms.
#
# TZInfo will only load transitions that fall within the supported range of
# the Time class. Any queries performed on times outside of this range may
# give inaccurate results.
#
# The second factor concerns the zoneinfo files. Versions of the 'zic' tool
# (used to build zoneinfo files) that were released prior to February 2006
# created zoneinfo files that used 32-bit integers for transition timestamps.
# Later versions of zic produce zoneinfo files that use 64-bit integers. If
# you have 32-bit zoneinfo files on your system, then any queries falling
# outside of the range 1901-12-13 20:45:52 to 2038-01-19 03:14:07 may be
# inaccurate.
#
# Most modern platforms include 64-bit zoneinfo files. However, Mac OS X (up
# to at least 10.8.4) still uses 32-bit zoneinfo files.
#
# To check whether your zoneinfo files contain 32-bit or 64-bit transition
# data, you can run the following code (substituting the identifier of the
# zone you want to test for zone_identifier):
#
#   TZInfo::DataSource.set(:zoneinfo)
#   dir = TZInfo::DataSource.get.zoneinfo_dir
#   File.open(File.join(dir, zone_identifier), 'r') {|f| f.read(5) }
#
# If the last line returns "TZif\\x00", then you have a 32-bit zoneinfo file.
# If it returns "TZif2" or "TZif3" then you have a 64-bit zoneinfo file.
#
# If you require support for 64-bit transitions, but are restricted to 32-bit
# zoneinfo support, then you may want to consider using TZInfo::RubyDataSource
# instead.
#
# source://tzinfo//lib/tzinfo/zoneinfo_data_source.rb#76
class TZInfo::ZoneinfoDataSource < ::TZInfo::DataSource
  # Creates a new ZoneinfoDataSource.
  #
  # If zoneinfo_dir is specified, it will be checked and used as the source
  # of zoneinfo files.
  #
  # The directory must contain a file named iso3166.tab and a file named
  # either zone1970.tab or zone.tab. These may either be included in the root
  # of the directory or in a 'tab' sub-directory and named 'country.tab' and
  # 'zone_sun.tab' respectively (as is the case on Solaris.
  #
  # Additionally, the path to iso3166.tab can be overridden using the
  # alternate_iso3166_tab_path parameter.
  #
  # InvalidZoneinfoDirectory will be raised if the iso3166.tab and
  # zone1970.tab or zone.tab files cannot be found using the zoneinfo_dir and
  # alternate_iso3166_tab_path parameters.
  #
  # If zoneinfo_dir is not specified or nil, the paths referenced in
  # search_path are searched in order to find a valid zoneinfo directory
  # (one that contains zone1970.tab or zone.tab and iso3166.tab files as
  # above).
  #
  # The paths referenced in alternate_iso3166_tab_search_path are also
  # searched to find an iso3166.tab file if one of the searched zoneinfo
  # directories doesn't contain an iso3166.tab file.
  #
  # If no valid directory can be found by searching, ZoneinfoDirectoryNotFound
  # will be raised.
  #
  # @return [ZoneinfoDataSource] a new instance of ZoneinfoDataSource
  #
  # source://tzinfo//lib/tzinfo/zoneinfo_data_source.rb#167
  def initialize(zoneinfo_dir = T.unsafe(nil), alternate_iso3166_tab_path = T.unsafe(nil)); end

  # Returns an array of all the available ISO 3166-1 alpha-2
  # country codes.
  #
  # source://tzinfo//lib/tzinfo/zoneinfo_data_source.rb#250
  def country_codes; end

  # Returns an array of all the available timezone identifiers for
  # data timezones (i.e. those that actually contain definitions).
  #
  # For ZoneinfoDataSource, this will always be identical to
  # timezone_identifers.
  #
  # source://tzinfo//lib/tzinfo/zoneinfo_data_source.rb#227
  def data_timezone_identifiers; end

  # Returns internal object state as a programmer-readable string.
  #
  # source://tzinfo//lib/tzinfo/zoneinfo_data_source.rb#260
  def inspect; end

  # Returns an array of all the available timezone identifiers that
  # are links to other timezones.
  #
  # For ZoneinfoDataSource, this will always be an empty array.
  #
  # source://tzinfo//lib/tzinfo/zoneinfo_data_source.rb#235
  def linked_timezone_identifiers; end

  # Returns a CountryInfo instance for the given ISO 3166-1 alpha-2
  # country code. Raises InvalidCountryCode if the country could not be found
  # or the code is invalid.
  #
  # @raise [InvalidCountryCode]
  #
  # source://tzinfo//lib/tzinfo/zoneinfo_data_source.rb#242
  def load_country_info(code); end

  # Returns a TimezoneInfo instance for a given identifier.
  # Raises InvalidTimezoneIdentifier if the timezone is not found or the
  # identifier is invalid.
  #
  # source://tzinfo//lib/tzinfo/zoneinfo_data_source.rb#192
  def load_timezone_info(identifier); end

  # Returns an array of all the available timezone identifiers.
  #
  # source://tzinfo//lib/tzinfo/zoneinfo_data_source.rb#218
  def timezone_identifiers; end

  # Returns the name and information about this DataSource.
  #
  # source://tzinfo//lib/tzinfo/zoneinfo_data_source.rb#255
  def to_s; end

  # The zoneinfo directory being used.
  #
  # source://tzinfo//lib/tzinfo/zoneinfo_data_source.rb#137
  def zoneinfo_dir; end

  private

  # Converts degrees, minutes and seconds to a Rational.
  #
  # source://tzinfo//lib/tzinfo/zoneinfo_data_source.rb#481
  def dms_to_rational(sign, degrees, minutes, seconds = T.unsafe(nil)); end

  # Recursively scans a directory of timezones, calling the passed in block
  # for each identifier found.
  #
  # source://tzinfo//lib/tzinfo/zoneinfo_data_source.rb#364
  def enum_timezones(dir, exclude = T.unsafe(nil), &block); end

  # Finds a zoneinfo directory using search_path and
  # alternate_iso3166_tab_search_path. Returns the paths to the directory,
  # the iso3166.tab file and the zone.tab file or nil if not found.
  #
  # source://tzinfo//lib/tzinfo/zoneinfo_data_source.rb#322
  def find_zoneinfo_dir; end

  # Uses the iso3166.tab and zone1970.tab or zone.tab files to build an index
  # of the available countries and their timezones.
  #
  # source://tzinfo//lib/tzinfo/zoneinfo_data_source.rb#382
  def load_country_index(iso3166_tab_path, zone_tab_path); end

  # Scans @zoneinfo_dir and returns an Array of available timezone
  # identifiers.
  #
  # source://tzinfo//lib/tzinfo/zoneinfo_data_source.rb#344
  def load_timezone_index; end

  # Attempts to resolve the path to a tab file given its standard names and
  # tab sub-directory name (as used on Solaris).
  #
  # source://tzinfo//lib/tzinfo/zoneinfo_data_source.rb#307
  def resolve_tab_path(zoneinfo_path, standard_names, tab_name); end

  # Validates a zoneinfo directory and returns the paths to the iso3166.tab
  # and zone1970.tab or zone.tab files if valid. If the directory is not
  # valid, returns nil.
  #
  # The path to the iso3166.tab file may be overriden by passing in a path.
  # This is treated as either absolute or relative to the current working
  # directory.
  #
  # source://tzinfo//lib/tzinfo/zoneinfo_data_source.rb#287
  def validate_zoneinfo_dir(path, iso3166_tab_path = T.unsafe(nil)); end

  class << self
    # An Array of paths that will be checked to find an alternate iso3166.tab
    # file if one was not included in the zoneinfo directory (for example, on
    # FreeBSD and OpenBSD systems).
    #
    # Paths are checked in the order they appear in the array.
    #
    # The default value is ['/usr/share/misc/iso3166.tab', '/usr/share/misc/iso3166'].
    #
    # source://tzinfo//lib/tzinfo/zoneinfo_data_source.rb#119
    def alternate_iso3166_tab_search_path; end

    # Sets the paths to check to locate an alternate iso3166.tab file if one was
    # not included in the zoneinfo directory.
    #
    # Can be set to an Array of directories or a String containing directories
    # separated with File::PATH_SEPARATOR.
    #
    # Paths are checked in the order they appear in the array.
    #
    # Set to nil to revert to the default paths.
    #
    # source://tzinfo//lib/tzinfo/zoneinfo_data_source.rb#132
    def alternate_iso3166_tab_search_path=(alternate_iso3166_tab_search_path); end

    # Processes a path for use as the search_path or
    # alternate_iso3166_tab_search_path.
    #
    # source://tzinfo//lib/tzinfo/zoneinfo_data_source.rb#268
    def process_search_path(path, default); end

    # An Array of directories that will be checked to find the system zoneinfo
    # directory.
    #
    # Directories are checked in the order they appear in the Array.
    #
    # The default value is ['/usr/share/zoneinfo', '/usr/share/lib/zoneinfo', '/etc/zoneinfo'].
    #
    # source://tzinfo//lib/tzinfo/zoneinfo_data_source.rb#95
    def search_path; end

    # Sets the directories to be checked when locating the system zoneinfo
    # directory.
    #
    # Can be set to an Array of directories or a String containing directories
    # separated with File::PATH_SEPARATOR.
    #
    # Directories are checked in the order they appear in the Array or String.
    #
    # Set to nil to revert to the default paths.
    #
    # source://tzinfo//lib/tzinfo/zoneinfo_data_source.rb#108
    def search_path=(search_path); end
  end
end

# The default value of ZoneinfoDataSource.alternate_iso3166_tab_search_path.
#
# source://tzinfo//lib/tzinfo/zoneinfo_data_source.rb#80
TZInfo::ZoneinfoDataSource::DEFAULT_ALTERNATE_ISO3166_TAB_SEARCH_PATH = T.let(T.unsafe(nil), Array)

# The default value of ZoneinfoDataSource.search_path.
#
# source://tzinfo//lib/tzinfo/zoneinfo_data_source.rb#77
TZInfo::ZoneinfoDataSource::DEFAULT_SEARCH_PATH = T.let(T.unsafe(nil), Array)

# A ZoneinfoDirectoryNotFound exception is raised if no valid zoneinfo
# directory could be found when checking the paths listed in
# ZoneinfoDataSource.search_path. A valid zoneinfo directory is one that
# contains timezone files, a country code index file named iso3166.tab and a
# timezone index file named zone1970.tab or zone.tab.
#
# source://tzinfo//lib/tzinfo/zoneinfo_data_source.rb#14
class TZInfo::ZoneinfoDirectoryNotFound < ::StandardError; end

# Represents a timezone defined by a compiled zoneinfo TZif (\0, 2 or 3) file.
#
# @private
#
# source://tzinfo//lib/tzinfo/zoneinfo_timezone_info.rb#10
class TZInfo::ZoneinfoTimezoneInfo < ::TZInfo::TransitionDataTimezoneInfo
  # Constructs the new ZoneinfoTimezoneInfo with an identifier and path
  # to the file.
  #
  # @return [ZoneinfoTimezoneInfo] a new instance of ZoneinfoTimezoneInfo
  #
  # source://tzinfo//lib/tzinfo/zoneinfo_timezone_info.rb#24
  def initialize(identifier, file_path); end

  private

  # Read bytes from file and check that the correct number of bytes could
  # be read. Raises InvalidZoneinfoFile if the number of bytes didn't match
  # the number requested.
  #
  # source://tzinfo//lib/tzinfo/zoneinfo_timezone_info.rb#49
  def check_read(file, bytes); end

  # Defines an offset for the timezone based on the given index and offset
  # Hash.
  #
  # source://tzinfo//lib/tzinfo/zoneinfo_timezone_info.rb#144
  def define_offset(index, offset); end

  # Zoneinfo files don't include the offset from standard time (std_offset)
  # for DST periods. Derive the base offset (utc_offset) where DST is
  # observed from either the previous or next non-DST period.
  #
  # Returns the index of the offset to be used prior to the first
  # transition.
  #
  # source://tzinfo//lib/tzinfo/zoneinfo_timezone_info.rb#65
  def derive_offsets(transitions, offsets); end

  # Unpack will return unsigned 32-bit integers. Translate to
  # signed 32-bit.
  #
  # source://tzinfo//lib/tzinfo/zoneinfo_timezone_info.rb#35
  def make_signed_int32(long); end

  # Unpack will return a 64-bit integer as two unsigned 32-bit integers
  # (most significant first). Translate to signed 64-bit
  #
  # source://tzinfo//lib/tzinfo/zoneinfo_timezone_info.rb#41
  def make_signed_int64(high, low); end

  # Parses a zoneinfo file and intializes the DataTimezoneInfo structures.
  #
  # source://tzinfo//lib/tzinfo/zoneinfo_timezone_info.rb#167
  def parse(file); end
end

# Maximum supported timestamp (exclusive).
#
# Time.utc(2500, 1, 1).to_i
#
# source://tzinfo//lib/tzinfo/zoneinfo_timezone_info.rb#20
TZInfo::ZoneinfoTimezoneInfo::MAX_TIMESTAMP = T.let(T.unsafe(nil), Integer)

# Minimum supported timestamp (inclusive).
#
# Time.utc(1700, 1, 1).to_i
#
# source://tzinfo//lib/tzinfo/zoneinfo_timezone_info.rb#15
TZInfo::ZoneinfoTimezoneInfo::MIN_TIMESTAMP = T.let(T.unsafe(nil), Integer)
