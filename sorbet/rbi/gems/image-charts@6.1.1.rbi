# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `image-charts` gem.
# Please instead update this file by running `bin/tapioca gem image-charts`.


# Image-Charts API URL builder
#
# source://image-charts//image-charts.rb#14
class ImageCharts
  # @return [ImageCharts] a new instance of ImageCharts
  #
  # source://image-charts//image-charts.rb#17
  def initialize(secret: T.unsafe(nil), protocol: T.unsafe(nil), host: T.unsafe(nil), port: T.unsafe(nil), timeout: T.unsafe(nil), previous: T.unsafe(nil)); end

  # Returns the value of attribute _host.
  #
  # source://image-charts//image-charts.rb#15
  def _host; end

  # Returns the value of attribute _pathname.
  #
  # source://image-charts//image-charts.rb#15
  def _pathname; end

  # Returns the value of attribute _port.
  #
  # source://image-charts//image-charts.rb#15
  def _port; end

  # Returns the value of attribute _protocol.
  #
  # source://image-charts//image-charts.rb#15
  def _protocol; end

  # Returns the value of attribute _query.
  #
  # source://image-charts//image-charts.rb#15
  def _query; end

  # Returns the value of attribute _timeout.
  #
  # source://image-charts//image-charts.rb#15
  def _timeout; end

  # gif configuration
  #
  # [Reference documentation]{@link https://documentation.image-charts.com/reference/animation/}
  # # @example
  # chart = ImageCharts().chan('1200')
  # chart = ImageCharts().chan('1300|easeInOutSine')
  #
  # gif configuration
  #
  # source://image-charts//image-charts.rb#426
  def chan(value); end

  # Bar corner radius. Display bars with rounded corner.
  #
  # [Reference documentation]{@link https://documentation.image-charts.com/bar-charts/#rounded-bar}
  # # @example
  # chart = ImageCharts().chbr('5')
  # chart = ImageCharts().chbr('10')
  #
  # Bar corner radius. Display bars with rounded corner.
  #
  # source://image-charts//image-charts.rb#414
  def chbr(value); end

  # [Reference documentation]{@link https://documentation.image-charts.com/bar-charts/#examples}
  # # @example
  # chart = ImageCharts().chco('FFC48C')
  # chart = ImageCharts().chco('FF0000,00FF00,0000FF')
  # series colors
  #
  # source://image-charts//image-charts.rb#252
  def chco(value); end

  # chart data
  #
  # [Reference documentation]{@link https://documentation.image-charts.com/reference/data-format/}
  # # @example
  # chart = ImageCharts().chd('a:-100,200.5,75.55,110')
  # chart = ImageCharts().chd('t:10,20,30|15,25,35')
  # chart = ImageCharts().chd('s:BTb19_,Mn5tzb')
  # chart = ImageCharts().chd('e:BaPoqM2s,-A__RMD6')
  #
  # chart data
  #
  # source://image-charts//image-charts.rb#125
  def chd(value); end

  # Format: &amp;lt;data_series_1_label&amp;gt;|...|&amp;lt;data_series_n_label&amp;gt;. The text for the legend entries. Each label applies to the corresponding series in the chd array. Use a + mark for a space. If you do not specify this parameter, the chart will not get a legend. There is no way to specify a line break in a label. The legend will typically expand to hold your legend text, and the chart area will shrink to accommodate the legend.
  #
  # [Reference documentation]{@link https://documentation.image-charts.com/reference/legend-text-and-style/}
  # # @example
  # chart = ImageCharts().chdl('NASDAQ|FTSE100|DOW')
  #
  # Text for each series, to display in the legend
  #
  # source://image-charts//image-charts.rb#210
  def chdl(value); end

  # Position of the legend and order of the legend entries
  #
  # source://image-charts//image-charts.rb#391
  def chdlp(value); end

  # Specifies the color and font size of the legend text. &lt;color&gt;,&lt;size&gt;
  #
  # [Reference documentation]{@link https://documentation.image-charts.com/reference/legend-text-and-style/}
  # # @example
  # chart = ImageCharts().chdls('9e9e9e,17')
  # Chart legend text and style
  #
  # source://image-charts//image-charts.rb#221
  def chdls(value); end

  # You can configure some charts to scale automatically to fit their data with chds=a. The chart will be scaled so that the largest value is at the top of the chart and the smallest (or zero, if all values are greater than zero) will be at the bottom. Otherwise the &#34;&amp;lg;series_1_min&amp;gt;,&amp;lg;series_1_max&amp;gt;,...,&amp;lg;series_n_min&amp;gt;,&amp;lg;series_n_max&amp;gt;&#34; format set one or more minimum and maximum permitted values for each data series, separated by commas. You must supply both a max and a min. If you supply fewer pairs than there are data series, the last pair is applied to all remaining data series. Note that this does not change the axis range; to change the axis range, you must set the chxr parameter. Valid values range from (+/-)9.999e(+/-)199. You can specify values in either standard or E notation.
  #
  # [Reference documentation]{@link https://documentation.image-charts.com/reference/data-format/#text-format-with-custom-scaling}
  # # @example
  # chart = ImageCharts().chds('-80,140')
  #
  # data format with custom scaling
  #
  # source://image-charts//image-charts.rb#136
  def chds(value); end

  # Background Fills
  #
  # [Reference documentation]{@link https://documentation.image-charts.com/reference/background-fill/}
  # # @example
  # chart = ImageCharts().chf('b0,lg,0,f44336,0.3,03a9f4,0.8')
  # Background Fills
  #
  # source://image-charts//image-charts.rb#402
  def chf(value); end

  # Solid or dotted grid lines
  #
  # [Reference documentation]{@link https://documentation.image-charts.com/reference/grid-lines/}
  # # @example
  # chart = ImageCharts().chg('1,1')
  # chart = ImageCharts().chg('0,1,1,5')
  # chart = ImageCharts().chg('1,1,FF00FF')
  # chart = ImageCharts().chg('1,1,1,1,CECECE')
  #
  # Solid or dotted grid lines
  #
  # source://image-charts//image-charts.rb#235
  def chg(value); end

  # If specified it will override &#34;chdl&#34; values
  #
  # [Reference documentation]{@link https://documentation.image-charts.com/reference/chart-label/}
  # # @example
  # chart = ImageCharts().chl('label1|label2')
  # chart = ImageCharts().chl('multi# line# label1|label2')
  #
  # bar, pie slice, doughnut slice and polar slice chart labels
  #
  # source://image-charts//image-charts.rb#356
  def chl(value); end

  # QRCode error correction level and optional margin
  #
  # [Reference documentation]{@link https://documentation.image-charts.com/qr-codes/#error-correction-level-and-margin}
  # # @example
  # chart = ImageCharts().chld('L|4')
  # chart = ImageCharts().chld('M|10')
  # chart = ImageCharts().chld('Q|5')
  # chart = ImageCharts().chld('H|18')
  # QRCode error correction level and optional margin
  #
  # source://image-charts//image-charts.rb#161
  def chld(value); end

  # doughnut chart inside label
  #
  # [Reference documentation]{@link https://documentation.image-charts.com/pie-charts/#inside-label}
  # # @example
  # chart = ImageCharts().chli('95Kâ‚¬')
  # chart = ImageCharts().chli('45%')
  #
  # doughnut chart inside label
  #
  # source://image-charts//image-charts.rb#438
  def chli(value); end

  # Position and style of labels on data
  #
  # [Reference documentation]{@link https://documentation.image-charts.com/reference/chart-label/#positionning-and-formatting}
  # # @example
  # chart = ImageCharts().chlps('align,top|offset,10|color,FF00FF')
  # chart = ImageCharts().chlps('align,top|offset,10|color,FF00FF')
  #
  # Position and style of labels on data
  #
  # source://image-charts//image-charts.rb#368
  def chlps(value); end

  # line thickness and solid/dashed style
  #
  # [Reference documentation]{@link https://documentation.image-charts.com/line-charts/#line-styles}
  # # @example
  # chart = ImageCharts().chls('10')
  # chart = ImageCharts().chls('3,6,3|5')
  #
  # line thickness and solid/dashed style
  #
  # source://image-charts//image-charts.rb#344
  def chls(value); end

  # compound charts and line fills
  #
  # source://image-charts//image-charts.rb#332
  def chm(value); end

  # chart margins
  #
  # [Reference documentation]{@link https://documentation.image-charts.com/reference/chart-margin/}
  # # @example
  # chart = ImageCharts().chma('30,30,30,30')
  # chart = ImageCharts().chma('40,20')
  #
  # chart margins
  #
  # source://image-charts//image-charts.rb#380
  def chma(value); end

  # How to encode the data in the QR code. &#39;UTF-8&#39; is the default and only supported value. Contact our team if you wish to have support for Shift_JIS and/or ISO-8859-1.
  #
  # [Reference documentation]{@link https://documentation.image-charts.com/qr-codes/#data-encoding}
  # # @example
  # chart = ImageCharts().choe('UTF-8')
  #
  # QRCode data encoding
  #
  # source://image-charts//image-charts.rb#147
  def choe(value); end

  # [Reference documentation]{@link https://documentation.image-charts.com/reference/output-format/}
  # # @example
  # chart = ImageCharts().chof('.png')
  # chart = ImageCharts().chof('.svg')
  # chart = ImageCharts().chof('.gif')
  # Image output format
  #
  # source://image-charts//image-charts.rb#188
  def chof(value); end

  # Maximum chart size for all charts except maps is 998,001 pixels total (Google Image Charts was limited to 300,000), and maximum width or length is 999 pixels.
  #
  # [Reference documentation]{@link https://documentation.image-charts.com/reference/chart-size/}
  # # @example
  # chart = ImageCharts().chs('400x400')
  #
  # Chart size (&lt;width&gt;x&lt;height&gt;)
  #
  # source://image-charts//image-charts.rb#199
  def chs(value); end

  # [Reference documentation]{@link https://documentation.image-charts.com/reference/chart-type/}
  # # @example
  # chart = ImageCharts().cht('bvg')
  # chart = ImageCharts().cht('p')
  #
  # Chart type
  #
  # source://image-charts//image-charts.rb#111
  def cht(value); end

  # Format should be &#34;&lt;color&gt;,&lt;font_size&gt;[,&lt;opt_alignment&gt;,&lt;opt_font_family&gt;,&lt;opt_font_style&gt;]&#34;, opt_alignement is not supported
  #
  # [Reference documentation]{@link https://documentation.image-charts.com/reference/chart-title/}
  # # @example
  # chart = ImageCharts().chts('00FF00,17')
  #
  # chart title colors and font size
  #
  # source://image-charts//image-charts.rb#274
  def chts(value); end

  # chart title
  #
  # [Reference documentation]{@link https://documentation.image-charts.com/reference/chart-title/}
  # # @example
  # chart = ImageCharts().chtt('My beautiful chart')
  #
  # chart title
  #
  # source://image-charts//image-charts.rb#263
  def chtt(value); end

  # Specify one parameter set for each axis that you want to label. Format &#34;&lt;axis_index&gt;:|&lt;label_1&gt;|...|&lt;label_n&gt;|...|&lt;axis_index&gt;:|&lt;label_1&gt;|...|&lt;label_n&gt;&#34;. Separate multiple sets of labels using the pipe character ( | ).
  #
  # [Reference documentation]{@link https://documentation.image-charts.com/reference/chart-axis/#custom-axis-labels}
  # # @example
  # chart = ImageCharts().chxl('0:|Jan|July|Jan')
  # chart = ImageCharts().chxl('0:|Jan|July|Jan|1|10|20|30')
  #
  # Custom string axis labels on any axis
  #
  # source://image-charts//image-charts.rb#300
  def chxl(value); end

  # You can specify the range of values that appear on each axis independently, using the chxr parameter. Note that this does not change the scale of the chart elements (use chds for that), only the scale of the axis labels.
  #
  # [Reference documentation]{@link https://documentation.image-charts.com/reference/chart-axis/#axis-range}
  # # @example
  # chart = ImageCharts().chxr('0,0,200')
  # chart = ImageCharts().chxr('0,10,50,5')
  # chart = ImageCharts().chxr('0,0,500|1,0,200')
  #
  # Axis data-range
  #
  # source://image-charts//image-charts.rb#174
  def chxr(value); end

  # You can specify the range of values that appear on each axis independently, using the chxr parameter. Note that this does not change the scale of the chart elements (use chds for that), only the scale of the axis labels.
  #
  # [Reference documentation]{@link https://documentation.image-charts.com/reference/chart-axis/#axis-label-styles}
  # # @example
  # chart = ImageCharts().chxs('1,0000DD')
  # chart = ImageCharts().chxs('1N*cUSD*Mil,FF0000')
  # chart = ImageCharts().chxs('1N*cEUR*,FF0000')
  # chart = ImageCharts().chxs('2,0000DD,13,0,t')
  # chart = ImageCharts().chxs('0N*p*per-month,0000FF')
  # chart = ImageCharts().chxs('0N*e*,000000|1N*cUSD*Mil,FF0000|2N*2sz*,0000FF')
  #
  # Font size, color for axis labels, both custom labels and default label values
  #
  # source://image-charts//image-charts.rb#316
  def chxs(value); end

  # Specify which axes you want (from: &#34;x&#34;, &#34;y&#34;, &#34;t&#34; and &#34;r&#34;). You can use several of them, separated by a coma; for example: &#34;x,x,y,r&#34;. Order is important.
  #
  # [Reference documentation]{@link https://documentation.image-charts.com/reference/chart-axis/#visible-axes}
  # # @example
  # chart = ImageCharts().chxt('y')
  # chart = ImageCharts().chxt('x,y')
  # chart = ImageCharts().chxt('x,x,y')
  # chart = ImageCharts().chxt('x,y,t,r,t')
  #
  # Display values on your axis lines or change which axes are shown
  #
  # source://image-charts//image-charts.rb#288
  def chxt(value); end

  # image-charts enterprise `account_id`
  #
  # [Reference documentation]{@link https://documentation.image-charts.com/enterprise/}
  # # @example
  # chart = ImageCharts().icac('accountId')
  #
  # image-charts enterprise `account_id`
  #
  # source://image-charts//image-charts.rb#449
  def icac(value); end

  # How to use icff to define font family as Google Font : https://developers.google.com/fonts/docs/css2
  #
  # [Reference documentation]{@link https://documentation.image-charts.com/reference/chart-font/}
  # # @example
  # chart = ImageCharts().icff('Abel')
  # chart = ImageCharts().icff('Akronim')
  # chart = ImageCharts().icff('Alfa Slab One')
  #
  # Default font family for all text from Google Fonts. Use same syntax as Google Font CSS API
  #
  # source://image-charts//image-charts.rb#473
  def icff(value); end

  # Default font style for all text
  #
  # [Reference documentation]{@link https://documentation.image-charts.com/reference/chart-font/}
  # # @example
  # chart = ImageCharts().icfs('normal')
  # chart = ImageCharts().icfs('italic')
  #
  # Default font style for all text
  #
  # source://image-charts//image-charts.rb#485
  def icfs(value); end

  # HMAC-SHA256 signature required to activate paid features
  #
  # [Reference documentation]{@link https://documentation.image-charts.com/enterprise/}
  # # @example
  # chart = ImageCharts().ichm('0785cf22a0381c2e0239e27c126de4181f501d117c2c81745611e9db928b0376')
  #
  # HMAC-SHA256 signature required to activate paid features
  #
  # source://image-charts//image-charts.rb#460
  def ichm(value); end

  # localization (ISO 639-1)
  #
  # [Reference documentation]{@link }
  # # @example
  # chart = ImageCharts().iclocale('en')
  #
  # localization (ISO 639-1)
  #
  # source://image-charts//image-charts.rb#496
  def iclocale(value); end

  # Background color for QR Codes
  #
  # [Reference documentation]{@link https://documentation.image-charts.com/qr-codes/#background-color}
  # # @example
  # chart = ImageCharts().icqrb('FFFFFF')
  # Background color for QR Codes
  #
  # source://image-charts//image-charts.rb#519
  def icqrb(value); end

  # Foreground color for QR Codes
  #
  # [Reference documentation]{@link https://documentation.image-charts.com/qr-codes/#foreground-color}
  # # @example
  # chart = ImageCharts().icqrf('000000')
  # Foreground color for QR Codes
  #
  # source://image-charts//image-charts.rb#530
  def icqrf(value); end

  # [Reference documentation]{@link https://documentation.image-charts.com/reference/retina/}
  # # @example
  # chart = ImageCharts().icretina('1')
  #
  # retina mode
  #
  # source://image-charts//image-charts.rb#508
  def icretina(value); end

  # Returns the value of attribute request_headers.
  #
  # source://image-charts//image-charts.rb#15
  def request_headers; end

  # Do a request to Image-Charts API with current configuration and yield a binary string
  #
  # @raise [ImageChartsError]
  # @return [String] raw image data, binary string
  #
  # source://image-charts//image-charts.rb#46
  def to_blob; end

  # Do a request to Image-Charts API with current configuration and yield a promise of a base64 encoded data URI
  #
  # @return [Promise<String>] base64 data URI wrapped inside a promise
  #
  # source://image-charts//image-charts.rb#93
  def to_data_uri; end

  # Do a request to Image-Charts API with current configuration and writes the content inside a file
  #
  # @return [Promise]
  #
  # source://image-charts//image-charts.rb#82
  def to_file(file); end

  # Get the full Image-Charts API url (signed and encoded if necessary)
  #
  # @return [string] full generated url
  #
  # source://image-charts//image-charts.rb#31
  def to_url; end

  private

  # source://image-charts//image-charts.rb#537
  def _clone(param, value); end
end

# source://image-charts//image-charts.rb#552
class ImageChartsError < ::StandardError
  # @return [ImageChartsError] a new instance of ImageChartsError
  #
  # source://image-charts//image-charts.rb#554
  def initialize(message, validation_code, status_code); end

  # Returns the value of attribute status_code.
  #
  # source://image-charts//image-charts.rb#553
  def status_code; end

  # Returns the value of attribute validation_code.
  #
  # source://image-charts//image-charts.rb#553
  def validation_code; end
end

class Object < ::BasicObject
  include ::Kernel
  include ::PP::ObjectMixin

  private

  # source://image-charts//image-charts.rb#563
  def ImageCharts(*args); end
end
